C51 COMPILER V9.00   OS_CPU_C                                                              02/15/2019 08:58:13 PAGE 1   


C51 COMPILER V9.00, COMPILATION OF MODULE OS_CPU_C
OBJECT MODULE PLACED IN .\OS_CPU_C.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE ..\Target\OS_CPU_C.C LARGE BROWSE DEBUG OBJECTEXTEND PRINT(.\OS_CPU_C.lst) 
                    -TABS(2) OBJECT(.\OS_CPU_C.obj)

line level    source

   1          /*********************************************************************************************************
   2          **                                       Small RTOS 51
   3          **                                   The Real-Time Kernel For Keil c51
   4          **
   5          **                                  (c) Copyright 2002-2003, chenmingji
   6          **                                           All Rights Reserved
   7          **
   8          **                                                  V1.12.0
   9          **
  10          **
  11          **--------------文件信息--------------------------------------------------------------------------------
  12          **文   件   名: OS_CPU_C.C
  13          **创   建   人: 陈明计
  14          **最后修改日期:  2003年8月17日
  15          **描        述: Small RTOS 51与CPU(既8051系列)相关的C语言代码
  16          **
  17          **--------------历史版本信息----------------------------------------------------------------------------
  18          ** 创建人: 陈明计
  19          ** 版  本: V0.50~v1.00
  20          ** 日　期: 2002年2月22日~2002年6月20日
  21          ** 描　述: 基本完成
  22          **
  23          **------------------------------------------------------------------------------------------------------
  24          ** 修改人: 陈明计
  25          ** 版  本: V1.10~V1.12.0
  26          ** 日　期: 2002年9月1日~002年12月30日
  27          ** 描　述: 完善代码
  28          **
  29          **------------------------------------------------------------------------------------------------------
  30          ** 修改人: 陈明计
  31          ** 版  本: V1.20.0
  32          ** 日　期: 2003年8月17日
  33          ** 描　述: 根据新版本需要增减了函数
  34          **
  35          **--------------当前版本修订------------------------------------------------------------------------------
  36          ** 修改人:
  37          ** 日　期:
  38          ** 描　述:
  39          **
  40          **------------------------------------------------------------------------------------------------------
  41          ********************************************************************************************************/
  42          
  43          #define  IN_OS_CPU_C
  44          #include "CONFIG.h"
  45          extern uint16   uiIsrTimerCount;
  46          
  47          extern idata uint8 STACK[1];                    /* 堆栈起始位置,在OS_CPU_A定义 */
  48          uint8 idata * data OSTsakStackBotton[OS_MAX_TASKS + 2];/* 任务堆栈底部位置            */
  49          
  50          #if EN_SP2 > 0
              uint8 idata  Sp2[Sp2Space];                     /* 高级中断堆栈           */
              #endif
  53          
  54          #if OS_MAX_TASKS < 9            
C51 COMPILER V9.00   OS_CPU_C                                                              02/15/2019 08:58:13 PAGE 2   

  55          uint8 data OSFastSwap[1];                        /* 任务是否可以快速切换 */
  56          #else
              uint8 data OSFastSwap[2];
              #endif
  59          
  60          extern data uint16 C_XBP;
  61          unsigned char  timer_i=0;
  62          
  63          void TaskIdle(void)   small;
  64          /*********************************************************************************************************
  65          ** 函数名称: OSCPUInit
  66          ** 功能描述: Small RTOS 与系统相关的初始化
  67          ** 输　入: 无
  68          ** 输　出 : 无
  69          ** 全局变量: OSTaskID,OSTsakStackBotton,SP
  70          ** 调用模块: LoadCtx
  71          ** 
  72          ** 作　者: 陈明计
  73          ** 日　期: 2002年2月22日
  74          **-------------------------------------------------------------------------------------------------------
  75          ** 修改人:
  76          ** 日　期:
  77          **-------------------------------------------------------------------------------------------------------
  78          ********************************************************************************************************/
  79                  void OSCPUInit(void)  small
  80          {
  81   1          uint8 i;
  82   1      
  83   1          for (i = 0; i < OS_MAX_TASKS + 1; i++)
  84   1          {
  85   2              OSTsakStackBotton[i] = STACK;
  86   2          }
  87   1          OSTsakStackBotton[OS_MAX_TASKS + 1] = (uint8 idata *)(IDATA_RAM_SIZE % 256);
  88   1          
  89   1      }
  90          
  91          /*********************************************************************************************************
  92          ** 函数名称: OSTaskStkInit
  93          ** 功能描述: 任务堆栈初始化
  94          ** 输　入: 无
  95          ** 输　出 : 无
  96          ** 全局变量: OSTaskID,OSTsakStackBotton,SP
  97          ** 调用模块: LoadCtx
  98          ** 
  99          ** 作　者: 陈明计
 100          ** 日　期: 2002年2月22日
 101          **-------------------------------------------------------------------------------------------------------
 102          ** 修改人:
 103          ** 日　期:
 104          **-------------------------------------------------------------------------------------------------------
 105          ********************************************************************************************************/
 106          /*
 107          #if EN_REENTRANT > 0
 108          #define SP_ADD_BYTE  5
 109          #else
 110          #define SP_ADD_BYTE  3
 111          #endif
 112          
 113          
 114                  void OSTaskStkInit(void (code * task)(void), void xdata *ptos, uint8 TaskID) small
 115          {
 116              uint8 i;
C51 COMPILER V9.00   OS_CPU_C                                                              02/15/2019 08:58:13 PAGE 3   

 117              uint8 idata * cp;
 118              uint8 idata * cp1;
 119              
 120          #if OS_MAX_TASKS < 9
 121                  OSFastSwap[1] |= OSMapTbl[TaskID];
 122          #else
 123                  if (TaskID < 8)
 124                  {
 125                      OSFastSwap[1] |= OSMapTbl[TaskID];
 126                  }
 127                  else
 128                  {
 129                      OSFastSwap[0] |= OSMapTbl[TaskID & 0x07];
 130                  }
 131          #endif
 132              
 133              if (TaskID < OSRunningTaskID())
 134              {
 135                  i =  OSRunningTaskID() - TaskID;
 136                  cp = (uint8 idata *)(&(OSTsakStackBotton[TaskID + 1]));
 137                  
 138                  do
 139                  {
 140                      *cp += SP_ADD_BYTE;
 141                      cp++;
 142                  } while (--i != 0);
 143                  
 144                  cp1 = (uint8 idata *)SP;
 145                  SP = SP + SP_ADD_BYTE;
 146                  i = SP - (uint8)(OSTsakStackBotton[TaskID + 1]);
 147                  cp = (uint8 idata *)SP;
 148                  do
 149                  {
 150                      *cp-- = *cp1--;
 151                  } while (--i != 0);
 152              }
 153              else
 154              {
 155                  cp1 = (uint8 idata *)(&(OSTsakStackBotton[OSRunningTaskID() + 1]));
 156                  
 157                  i = TaskID - OSRunningTaskID();
 158                  
 159                  do
 160                  {
 161                      *cp1 -= SP_ADD_BYTE;
 162                      cp1++;
 163                  } while (--i != 0);
 164                  
 165                  cp = OSTsakStackBotton[OSRunningTaskID() + 1];
 166                  i = OSTsakStackBotton[TaskID] - cp - SP_ADD_BYTE;
 167                  cp1 = cp - SP_ADD_BYTE;
 168                  do
 169                  {
 170                      *cp1++ = *cp++;
 171                  } while (--i != 0);
 172              }
 173              cp = OSTsakStackBotton[TaskID];
 174              *cp++ = (uint16)task % 256;
 175              *cp++ = (uint16)task / 256;
 176          #if EN_REENTRANT > 0
 177              *cp++ = (uint16)ptos / 256;
 178              *cp++ = (uint16)ptos % 256;
C51 COMPILER V9.00   OS_CPU_C                                                              02/15/2019 08:58:13 PAGE 4   

 179          #endif
 180              *cp = 0;
 181          }
 182              */
 183          
 184          
 185          /*********************************************************************************************************
 186          ** 函数名称: OSTaskStkDel
 187          ** 功能描述: 任务堆栈删除
 188          ** 输　入: 无
 189          ** 输　出 : 无
 190          ** 全局变量: OSTaskID,OSTsakStackBotton,SP
 191          ** 调用模块: LoadCtx
 192          ** 
 193          ** 作　者: 陈明计
 194          ** 日　期: 2002年2月22日
 195          **-------------------------------------------------------------------------------------------------------
 196          ** 修改人:
 197          ** 日　期:
 198          **-------------------------------------------------------------------------------------------------------
 199          ********************************************************************************************************/
 200          
 201                  void StkDelA(uint8 TaskID)
 202          {
 203   1          uint8 idata *cp;
 204   1          uint8 idata *cp1;
 205   1          uint8 temp, i;
 206   1          
 207   1          cp = OSTsakStackBotton[TaskID];
 208   1          cp1 = OSTsakStackBotton[TaskID + 1];
 209   1          temp = cp1 - cp;
 210   1          for (i = TaskID + 1; i <= OSRunningTaskID(); i++)
 211   1          {
 212   2              OSTsakStackBotton[i] -= temp;
 213   2          }
 214   1          i = SP - (uint8)(cp1) + 1;
 215   1          do
 216   1          {
 217   2              *cp++ = *cp1++;
 218   2          } while (--i != 0);
 219   1          SP = SP - temp;
 220   1      }
 221          
 222          
 223                  void StkDelB(uint8 TaskID)
 224          {
 225   1          uint8 idata *cp;
 226   1          uint8 idata *cp1;
 227   1          uint8 temp, i;
 228   1      
 229   1          cp = OSTsakStackBotton[TaskID];
 230   1          cp1 = OSTsakStackBotton[TaskID + 1];
 231   1          i = OSTsakStackBotton[TaskID] - OSTsakStackBotton[OSRunningTaskID() + 1];
 232   1          if (i != 0)
 233   1          {
 234   2              do
 235   2              {
 236   3                  *cp1++ = *cp++;
 237   3              } while (--i != 0);
 238   2          }
 239   1          temp = cp1 - cp;
 240   1          for (i = OSRunningTaskID() + 1; i <= TaskID; i++)
C51 COMPILER V9.00   OS_CPU_C                                                              02/15/2019 08:58:13 PAGE 5   

 241   1          {
 242   2              OSTsakStackBotton[i] += temp;
 243   2          }
 244   1      }
 245          
 246                  void StkDelC(uint8 TaskID)
 247          {
 248   1          uint8 idata *cp;
 249   1          extern void C_OSCtxSw(void);
 250   1          
 251   1          
 252   1          cp = OSTsakStackBotton[TaskID];
 253   1          *cp++ = (uint16)C_OSCtxSw % 256;
 254   1          *cp = (uint16)C_OSCtxSw / 256;
 255   1          SP = (uint8) cp;
 256   1          OSFindNextRunningTask();
 257   1      }
 258          
 259                  void OSTaskStkDel(uint8 TaskID)  small
 260          {
 261   1          uint8 temp;
 262   1      
 263   1          temp = 1;
 264   1          if(TaskID == OSRunningTaskID())
 265   1          {
 266   2              temp = 2;
 267   2          }
 268   1          else if (TaskID < OSRunningTaskID())
 269   1          {
 270   2              temp = 0;
 271   2          }
 272   1          switch (temp)
 273   1          {
 274   2              case 0:
 275   2                  StkDelA(TaskID);
 276   2                  break;
 277   2              case 1:
 278   2                  StkDelB(TaskID);
 279   2                  break;
 280   2              case 2:
 281   2                  StkDelC(TaskID);
 282   2                  break;
 283   2              default:
 284   2                  break;
 285   2          }
 286   1      }
 287          
 288          /*********************************************************************************************************
 289          ** 函数名称: OSTickISR
 290          ** 功能描述: 系统时钟中断服务函数
 291          ** 输　入: 无
 292          ** 输　出 : 无
 293          ** 全局变量: 无
 294          ** 调用模块: OS_IBT_ENTER,(UserTickTimer),OSTimeTick,OSIntExit
 295          ** 
 296          ** 作　者: 陈明计
 297          ** 日　期: 2002年2月22日
 298          **-------------------------------------------------------------------------------------------------------
 299          ** 修改人: 陈明计
 300          ** 日　期: 2002年10月23日
 301          **-------------------------------------------------------------------------------------------------------
 302          ** 修改人:
C51 COMPILER V9.00   OS_CPU_C                                                              02/15/2019 08:58:13 PAGE 6   

 303          ** 日　期:
 304          **-------------------------------------------------------------------------------------------------------
 305          ********************************************************************************************************/
 306          #pragma disable                                         /* 除非最高优先级中断，否则，必须加上这一句       
             -          */
 307          
 308           //       void OSTickISR(void) interrupt OS_TIME_ISR
 309                   void OSTickISR(void) interrupt PCA_LVD_INTNO
 310          
 311          {
 312   1        if(CCF0 ==1)
 313   1        {
 314   2          CCF0=0;
 315   2      #if TICK_TIMER_SHARING >1 
                  static uint8 TickSum = 0;
              #endif
 318   2      
 319   2      #if EN_USER_TICK_TIMER > 0 
 320   2          UserTickTimer();                                    /* 用户函数                                         
             -        */
 321   2      #endif
 322   2      
 323   2      #if TICK_TIMER_SHARING >1 
                  TickSum = (TickSum + 1) % TICK_TIMER_SHARING;
                  if (TickSum != 0)
                  {
                      return;
                  }
              #endif    
 330   2          OS_INT_ENTER();                                     /* 中断开始处理                                    *
             -/
 331   2      
 332   2      #if EN_TIMER_SHARING > 0
 333   2          OSTimeTick();                                       /* 调用系统时钟处理函数                            *
             -/
 334   2      #else
                  OSIntSendSignal(TIME_ISR_TASK_ID);                  /* 唤醒ID为TIME_ISR_TASK_ID的任务                 */
              #endif
 337   2      
 338   2          OSIntExit();                                        /* 中断结束处理                                    *
             -/
 339   2        }
 340   1      }
 341          
 342          /*********************************************************************************************************
 343          **                            End Of File
 344          ********************************************************************************************************/


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    289    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =      1    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      8    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)

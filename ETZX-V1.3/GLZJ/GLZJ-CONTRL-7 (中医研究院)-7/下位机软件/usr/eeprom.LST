C51 COMPILER V9.00   EEPROM                                                                02/15/2019 14:38:56 PAGE 1   


C51 COMPILER V9.00, COMPILATION OF MODULE EEPROM
OBJECT MODULE PLACED IN eeprom.OBJ
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE eeprom.c LARGE BROWSE DEBUG OBJECTEXTEND TABS(2)

line level    source

   1          #define _IN_EEPROM_
   2          #include "Config.h"
   3          
   4          
   5          union union_temp16
   6          {
   7              INT16U un_temp16;
   8              INT8U  un_temp8[2];
   9          }my_unTemp16;
  10          
  11          //读一字节，调用前需打开IAP 功能，入口:DPTR = 字节地址，返回:A = 读出字节
  12          INT8U Byte_Read(INT16U add)
  13          {
  14   1          IAP_DATA = 0x00;
  15   1          IAP_CONTR = ENABLE_ISP;         //打开IAP 功能, 设置Flash 操作等待时间
  16   1          IAP_CMD = 0x01;                 //IAP/ISP/EEPROM 字节读命令
  17   1      
  18   1          my_unTemp16.un_temp16 = add;
  19   1          IAP_ADDRH = my_unTemp16.un_temp8[0];    //设置目标单元地址的高8 位地址
  20   1          IAP_ADDRL = my_unTemp16.un_temp8[1];    //设置目标单元地址的低8 位地址
  21   1      
  22   1          //EA = 0;
  23   1          IAP_TRIG = 0x5A;   //先送 5Ah,再送A5h 到ISP/IAP 触发寄存器,每次都需如此
  24   1          IAP_TRIG = 0xA5;   //送完A5h 后，ISP/IAP 命令立即被触发起动
  25   1          _nop_();
  26   1          //EA = 1;
  27   1          IAP_Disable();  //关闭IAP 功能, 清相关的特殊功能寄存器,使CPU 处于安全状态,
  28   1                          //一次连续的IAP 操作完成之后建议关闭IAP 功能,不需要每次都关
  29   1          return (IAP_DATA);
  30   1      }
  31          
  32          //字节编程，调用前需打开IAP 功能，入口:DPTR = 字节地址, A= 须编程字节的数据
  33          void Byte_Program(INT16U add, INT8U ch)
  34          {
  35   1          IAP_CONTR = ENABLE_ISP;         //打开 IAP 功能, 设置Flash 操作等待时间
  36   1          IAP_CMD = 0x02;                 //IAP/ISP/EEPROM 字节编程命令
  37   1      
  38   1          my_unTemp16.un_temp16 = add;
  39   1          IAP_ADDRH = my_unTemp16.un_temp8[0];    //设置目标单元地址的高8 位地址
  40   1          IAP_ADDRL = my_unTemp16.un_temp8[1];    //设置目标单元地址的低8 位地址
  41   1      
  42   1          IAP_DATA = ch;                  //要编程的数据先送进IAP_DATA 寄存器
  43   1          //EA = 0;
  44   1          IAP_TRIG = 0x5A;   //先送 5Ah,再送A5h 到ISP/IAP 触发寄存器,每次都需如此
  45   1          IAP_TRIG = 0xA5;   //送完A5h 后，ISP/IAP 命令立即被触发起动
  46   1          _nop_();
  47   1          //EA = 1;
  48   1          IAP_Disable();  //关闭IAP 功能, 清相关的特殊功能寄存器,使CPU 处于安全状态,
  49   1                          //一次连续的IAP 操作完成之后建议关闭IAP 功能,不需要每次都关
  50   1      }
  51          
  52          //擦除扇区, 入口:DPTR = 扇区地址
  53          void Sector_Erase(INT16U add)
  54          {
  55   1          IAP_CONTR = ENABLE_ISP;         //打开IAP 功能, 设置Flash 操作等待时间
C51 COMPILER V9.00   EEPROM                                                                02/15/2019 14:38:56 PAGE 2   

  56   1          IAP_CMD = 0x03;                 //IAP/ISP/EEPROM 扇区擦除命令
  57   1      
  58   1          my_unTemp16.un_temp16 = add;
  59   1          IAP_ADDRH = my_unTemp16.un_temp8[0];    //设置目标单元地址的高8 位地址
  60   1          IAP_ADDRL = my_unTemp16.un_temp8[1];    //设置目标单元地址的低8 位地址
  61   1      
  62   1          //EA = 0;
  63   1          IAP_TRIG = 0x5A;   //先送 5Ah,再送A5h 到ISP/IAP 触发寄存器,每次都需如此
  64   1          IAP_TRIG = 0xA5;   //送完A5h 后，ISP/IAP 命令立即被触发起动
  65   1          _nop_();
  66   1          //EA = 1;
  67   1          IAP_Disable();  //关闭IAP 功能, 清相关的特殊功能寄存器,使CPU 处于安全状态,
  68   1                          //一次连续的IAP 操作完成之后建议关闭IAP 功能,不需要每次都关
  69   1      }
  70          
  71          void IAP_Disable()
  72          {
  73   1          //关闭IAP 功能, 清相关的特殊功能寄存器,使CPU 处于安全状态,
  74   1          //一次连续的IAP 操作完成之后建议关闭IAP 功能,不需要每次都关
  75   1          IAP_CONTR = 0;      //关闭IAP 功能
  76   1          IAP_CMD   = 0;      //清命令寄存器,使命令寄存器无命令,此句可不用
  77   1          IAP_TRIG  = 0;      //清命令触发寄存器,使命令触发寄存器无触发,此句可不用
  78   1          IAP_ADDRH = 0;
  79   1          IAP_ADDRL = 0;
  80   1      }
  81          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    124    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =      2    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)

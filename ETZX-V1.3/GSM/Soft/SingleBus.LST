C51 COMPILER V8.08   SINGLEBUS                                                             09/25/2012 08:54:09 PAGE 1   


C51 COMPILER V8.08, COMPILATION OF MODULE SINGLEBUS
OBJECT MODULE PLACED IN SingleBus.OBJ
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE SingleBus.c BROWSE DEBUG OBJECTEXTEND

line level    source

   1          /*
   2          ************************Copyright(c)************************
   3          *                                  湖南一特电子股份有限公司
   4          *                               All Rights Reserved
   5          *                                        
   6          *
   7          *-----------------------文件信息---------------------------
   8          *文件名称               :SingleBus.c
   9          *文件描述               :单总线程序
  10          *创建人                 :尹运同
  11          *创建日期               :2008-9-22
  12          *版本号                 :V1.0
  13          *注释                   :                                       
  14          *----------------------------------------------------------
  15          *修改人                         :
  16          *修改日期                       :
  17          *版本号                 :
  18          *注释                   :
  19          ***********************************************************
  20          */
  21          #define _IN_SINGLE_BUS_
  22          #include "config.h"
  23          
  24          
  25          
  26          
  27          //总线0变量定义  总线0用于与外部设备通信
  28          uint8 bdata byBus0State0        = 0;                                                    //单总线0状态字1
  29          sbit  bBus0StartRec                     = byBus0State0^0;                               //单总线0开始接收起始位标志
  30          sbit  bBus0OnRec                        = byBus0State0^1;                               //单总线0开始接收数据位标志
  31          sbit  bBus0Enable                       = byBus0State0^2;                               //单总线0允许发送标志
  32          sbit  bBus0ReqSend                      = byBus0State0^3;                               //单总线0请求发送标志
  33          sbit  bBus0OnSendBit            = byBus0State0^4;                               //单总线0正在发送一个数据位标志
  34          sbit  bBus0OnSendFreq           = byBus0State0^5;                               //单总线0正在发送一个数据帧标志
  35          sbit  bBus0SendError            = byBus0State0^6;                               //单总线0发送错误标志
  36          sbit  bBus0Error                        = byBus0State0^7;                               //单总线0故障标志
  37          uint8 bdata byBus0State1        = 0;                                                    //单总线0状态字2
  38          sbit  bBus0RecFinish            = byBus0State1^0;                               //单总线0接收完成标志
  39          sbit  bBus0RecBit9                      = byBus0State1^1;                               //单总线0接收字节数据的第9位
  40          sbit  bBus0SendFinish           = byBus0State1^2;                               //单总线0发送完成标志
  41          sbit  bBus0Disable                      = byBus0State1^3;                               //单总线0禁止发送标志
  42          sbit  bBus0SendBit                      = byBus0State1^4;                               //单总线0正在发送的数据位
  43          sbit  bBus0RecBit                       = byBus0State1^5;                               //单总线0正在接收的数据位
  44          uint8 data byBus0RecCount = 0;                                                          //高4位是总线0接收定时中断计数，低4位是接收到的位计数
  45          uint8 data byBus0RecBuf;                                                                        //总线0接收缓冲单元
  46          uint8 data byBus0SendBuf;                                                                       //总线0发送缓冲单元     
  47          uint8 xdata byBus0RecData[BUS0_FREQ_SIZE];                                      //总线0接收缓冲区
  48          uint8 xdata byBus0SendData[BUS0_FREQ_SIZE];                                     //总线0发送缓冲区
  49          uint8 data byBus0SendCount = 0;                                                         //高4位是总线0发送定时中断计数，低4位是发送的位计数
  50          uint8 data byBus0RecSendCount = 0;                                                      //高4位是总线0接收到的字节计数，低4位是总线0发送完的字节计数
  51          uint8 data byBus0SendStopCount;                                                         //总线0停止时间计数
  52          uint8 data byBus0RecTimeOut = 0;                                                        //总线0接收超时计数
  53          uint8 data byBus0DisableCount = 0;                                                      //总线0禁止计数  
  54          uint8 xdata byBus0TxQ[BUS0_TX_Q_ZISE];                                          //总线0发送队列                                                 
  55          uint8 data byBus0TxHead = 0;                                                            //单总线0发送队列头指针
C51 COMPILER V8.08   SINGLEBUS                                                             09/25/2012 08:54:09 PAGE 2   

  56          uint8 data byBus0TxTail = 0;                                                            //单总线0发送队列尾指针
  57          #define IncBus0TxPtr(addr)    {addr=(addr+1)%BUS0_TX_Q_ZISE;}
  58          #define Bus0TxBuffLen()       ((byBus0TxTail+BUS0_TX_Q_ZISE-byBus0TxHead)%BUS0_TX_Q_ZISE)  
  59          sbit  Bus0RecPin        = P3^2;                                                                 //单总线0接收引脚定义
  60          sbit  Bus0SendPin       = P3^7;                                                                 //单总线0发送引脚定义
  61          
  62          
  63          
  64          
  65          extern unsigned char code ParameterData[];
  66          
  67          /**********************************************************
  68          *函数名称                       :SingleBusInit  
  69          *函数描述               :单总线初始化
  70          *输入参数               :
  71          *返回值                         :       
  72          *全局变量                       :
  73          *调用模块                       :
  74          ***********************************************************
  75          *创建人                 :尹运同
  76          *创建日期                       :2008-9-22
  77          ***********************************************************
  78          *修改人                         :
  79          *修改日期               :
  80          *注释                   :
  81          **********************************************************/
  82          void SingleBusInit(void)
  83          {
  84   1      
  85   1              //STC12C56系列::M0=0,M1=0:准双向，M0=0,M1=1:推挽，M0=1,M1=0:高阻，M0=1,M1=1:开漏
  86   1              //总线0发送脚设置为推挽输出，接收脚设置为准双向
  87   1              //P3^2,准双向,P3^7,推挽
  88   1              P3M0 &= (~Bin(0,0,0,0,0,1,0,0));
  89   1              P3M1 &= (~Bin(0,0,0,0,0,1,0,0));
  90   1              P3M0 &= (~Bin(1,0,0,0,0,0,0,0));
  91   1              P3M1 |=   Bin(1,0,0,0,0,0,0,0);
  92   1      
  93   1              
  94   1              //总线电平设置
  95   1              Bus0SendPin = 0;
  96   1              Bus0RecPin = 1; 
  97   1               
  98   1              
  99   1              //定时器0初始化:自动重载方式,定时93.75us   
 100   1              TMOD &= 0xf0;   //  ;t1作波特率发生器(不变)，
 101   1              TMOD |= 0X01;   //t0作方式1（16位)定时器
 102   1      
 103   1              TL0 = TIMER0_L;
 104   1              TH0 = TIMER0_H;
 105   1              TF0 = 0;                                                                                                //清除中断标志
 106   1              AUXR &= (~T0x12);                                                                               //传统12分频速度  
 107   1              ET0 = 1;                                                                                                //允许定时器0中断 
 108   1              TR0 = 1;                                                                                                //启动定时器
 109   1              //其它控制设置
 110   1              byBus0SendStopCount = 240;                                                              //上电总线0禁止发送时间设置
 111   1              byBus0State0 =0;
 112   1              byBus0State1 =0;
 113   1      
 114   1              IE0 = 0;                                                                                                //清除外部中断0标志
 115   1              IT0 = 1;                                                                                                //外部中断0为下降沿触发模式      
 116   1                              
 117   1              if(Bus0RecPin)
C51 COMPILER V8.08   SINGLEBUS                                                             09/25/2012 08:54:09 PAGE 3   

 118   1              {       //如果总线正常,开中断           
 119   2                      EX0 = 1;
 120   2                      
 121   2              }
 122   1              else
 123   1              {       //如果总线不正常,置总线故障标志                         
 124   2                      bBus0Error = 1;
 125   2              } 
 126   1      
 127   1      }
 128          /**********************************************************
 129          *函数名称                       :Bus0RecInt     
 130          *函数描述               :外部中断0函数,单总线0接收中断
 131          *输入参数               :
 132          *返回值                         :       
 133          *全局变量                       :
 134          *调用模块                       :
 135          ***********************************************************
 136          *创建人                 :尹运同
 137          *创建日期                       :2008-9-22
 138          ***********************************************************
 139          *修改人                         :
 140          *修改日期               :
 141          *注释                   :
 142          **********************************************************/
 143          #pragma disable
 144          void Bus0RecInt(void) interrupt X0_INTNO
 145          {       
 146   1              DisableBus0RecInt();                                                                    //禁止再次下降沿中断
 147   1              bBus0StartRec = 1;                                                                              //启动起始位沿检测
 148   1              bBus0Enable = 0;                                                                                //禁止总线发送                                                  
 149   1              byBus0RecCount = 0;                                                                             //清接收寄存器  
 150   1      
 151   1              if(bBus0ReqSend ==1)
 152   1              {//请求发送状态
 153   2                      byBus0SendStopCount = 240;
 154   2              }
 155   1      
 156   1      }
 157          
 158          
 159          /**********************************************************
 160          *函数名称                       :Timer0Int      
 161          *函数描述               :定时器0溢出中断,定时器每93.75us中断一次
 162                                                   程序间隔检查总线0与总线1的接收和发送
 163          *输入参数               :
 164          *返回值                         :       
 165          *全局变量                       :
 166          *调用模块                       :
 167          ***********************************************************
 168          *创建人                 :陈卫国
 169          *创建日期                       :2008-9-22
 170          ***********************************************************
 171          *修改人                         :
 172          *修改日期               :
 173          *注释                   :
 174          **********************************************************/
 175          #pragma disable
 176          void Timer0Int(void) interrupt T0_INTNO
 177          { 
 178   1      
 179   1              TR0=0;
C51 COMPILER V8.08   SINGLEBUS                                                             09/25/2012 08:54:09 PAGE 4   

 180   1              TH0=TIMER0_H;
 181   1              TL0=TIMER0_L;
 182   1              TR0=1;
 183   1      
 184   1              bBus0RecBit = Bus0RecPin;                                                               //保存总线0接收引脚状态           
 185   1              /*******************************总线0接收处理***********************************/
 186   1              if(bBus0StartRec)                                                                               //判断总线所处的状态，接收到起始位
 187   1              {                       
 188   2                      byBus0RecCount += 0x10;                                                         //增加定时中断计数次数
 189   2                      if(0x50 == (byBus0RecCount & 0xf0))                                     //到总线起始位检测时间
 190   2                      {                       
 191   3                              bBus0StartRec = 0;
 192   3                              byBus0RecCount = 0x00;                                                  //重新开始计数                  
 193   3                              if(bBus0RecBit)                 
 194   3                              {       //无效起始位                                                                                                                                            
 195   4                                      if((!bBus0SendError)&&bBus0OnSendFreq)
 196   4                                      {       //没有发生过总线发送错误,且有一帧数据正在发送,停止帧数据发送,置发送错误标志                                             
 197   5                                              byBus0State0 &= (~BUS0_SEND_CON);
 198   5                                              bBus0SendError = 1;
 199   5                                              Bus0SendPin = 0;                                                //释放总线                                      
 200   5                                      }                               
 201   4                                      byBus0SendStopCount = 240;                                      
 202   4                                      byBus0RecSendCount = 0x00;                                      //接收出错,重置接收发送计数值
 203   4                                      EnableBus0RecInt();
 204   4                              }
 205   3                              else                                                            
 206   3                              {       //有效起始位
 207   4                                      bBus0OnRec = 1;                                                         //开始接收数据位        
 208   4                              }
 209   3                      }
 210   2              }
 211   1              else if(bBus0OnRec)
 212   1              {               
 213   2                      byBus0RecCount += 0x10;                                                         //增加定时中断计数次数                  
 214   2                      if(0xa0 == (byBus0RecCount & 0xf0))
 215   2                      {
 216   3                              byBus0RecCount &= 0x0f;                                                 //清除定时中断计数次数
 217   3                              byBus0RecCount += 0x01;
 218   3                              if(0x0a == (byBus0RecCount & 0x0f))     
 219   3                              {       //收到第10位,结束位                                     
 220   4                                      bBus0OnRec = 0;                                                         //停止数据接收                                  
 221   4                                      if(bBus0RecBit)
 222   4                                      {       //有效的结束位                                                  
 223   5                                              if(((bit)(byBus0RecSendCount & 0xf0) == bBus0RecBit9)) 
 224   5                                              {       //数据桢错误
 225   6                                                      byBus0RecTimeOut = 0;
 226   6                                                      byBus0RecSendCount &= 0x0f;                                                                                     
 227   6                                              }
 228   5                                              else 
 229   5                                              {       //数据桢正确                                    
 230   6                                                      byBus0RecTimeOut = 230;                         //设置下一个字节数据接收超时时间
 231   6                                                      byBus0RecData[byBus0RecSendCount>>4] = byBus0RecBuf;
 232   6                                                      byBus0RecSendCount += 0x10;                                                                                                                                                                     
 233   6                                                      if((byBus0RecSendCount & 0xf0) >= BUS0_FREQ_SIZE_HI)
 234   6                                                      {                                                                                                                                                                               
 235   7                                                              byBus0RecSendCount &= 0x0f;                                                     
 236   7                                                              if(!((bBus0OnSendFreq == 1)&&(bBus0ReqSend == 0)))
 237   7                                                              {       //如果接收到的这帧数据是自己发送的不置标志                                                      
 238   8                                                                      bBus0RecFinish = 1;                                                                                                                                                                                                                                                                                                             
 239   8                                                              }                                                                                                                                               
 240   7                                                              byBus0RecTimeOut = 0;
 241   7                                                              byBus0DisableCount = 10;
C51 COMPILER V8.08   SINGLEBUS                                                             09/25/2012 08:54:09 PAGE 5   

 242   7                                                              bBus0Disable = 1;                               //禁止总线使用
 243   7                                                      }       
 244   6                                              }                               
 245   5                                              byBus0SendStopCount = 240;
 246   5                                              EnableBus0RecInt();                                             
 247   5                                      }
 248   4                                      else                                                    
 249   4                                      {       //无效结束位
 250   5                                              bBus0Error = 1;                                                                         
 251   5                                              if((!bBus0SendError) && bBus0OnSendFreq)
 252   5                                              {       //没有发生过总线发送错误,且有一帧数据正在发送,停止帧数据发送,置发送错误标志
 253   6                                                      byBus0State0 &= (~BUS0_SEND_CON);
 254   6                                                      bBus0SendError = 1;                                                     
 255   6                                                      Bus0SendPin = 0;                                        //释放总线
 256   6                                              }
 257   5                                              byBus0RecSendCount = 0x00;                              //接收出错,重置接收发送计数值
 258   5      
 259   5                                      }
 260   4                              }
 261   3                              else if(0x09 == (byBus0RecCount & 0x0f))
 262   3                              {       //第9位数据
 263   4                                      bBus0RecBit9 = bBus0RecBit;                                     
 264   4                              }
 265   3                              else                                                                                    
 266   3                              {       //有效数据位
 267   4                                      byBus0RecBuf >>= 1;
 268   4                                      if(bBus0RecBit)
 269   4                                      {       //为高电平
 270   5                                              byBus0RecBuf |= 0x80;
 271   5                                      }       
 272   4                              }
 273   3                      }
 274   2              }
 275   1      
 276   1              /*******************************总线0发送处理***********************************/
 277   1              if((byBus0State0 & BUS0_CAN_SEND) == BUS0_CAN_SEND)
 278   1              {       //总线0上有数据发送请求,且总线允许发送          
 279   2                      if(bBus0RecBit)
 280   2                      {       //总线正常,可以发送
 281   3                              Bus0SendPin = 1;
 282   3                              bBus0SendBit = 0;                                                               //发送起始位数据                        
 283   3                              byBus0SendCount = 0;
 284   3                              byBus0State0 &= (~BUS0_CAN_SEND);
 285   3                              byBus0SendBuf = byBus0SendData[byBus0RecSendCount & 0x0f];
 286   3                              bBus0OnSendBit = 1;                                                             //取出待发送的数据并置正在发送标志              
 287   3                      }
 288   2                      else
 289   2                      {       //总线不正常,停止发送
 290   3                              byBus0State0 &= (~BUS0_SEND_CON);
 291   3                              bBus0SendError = 1;                     
 292   3                              byBus0RecSendCount &= 0xf0;
 293   3                              Bus0SendPin = 0;
 294   3                              byBus0SendStopCount = 240;                      
 295   3                      }
 296   2              }
 297   1              else if(bBus0OnSendBit)
 298   1              {       //有数据位正在发送,首先发送的是起始位                   
 299   2                      if(bBus0SendBit == bBus0RecBit)                 
 300   2                      {       //发送的数据和接收的数据相同
 301   3                              byBus0SendCount += 0x10;
 302   3                              if(0xa0 == (byBus0SendCount & 0xf0))
 303   3                              {       //一位数据发送完毕,首先发送的是起始位
C51 COMPILER V8.08   SINGLEBUS                                                             09/25/2012 08:54:09 PAGE 6   

 304   4                                      byBus0SendCount &= 0x0f;
 305   4                                      byBus0SendCount += 0x01;                                
 306   4                                      if(0x09 == (byBus0SendCount & 0x0f))
 307   4                                      {       //发送到第9位了
 308   5                                              bBus0SendBit = !(bit)(byBus0RecSendCount & 0x0f);
 309   5                                              Bus0SendPin = !bBus0SendBit;                                            
 310   5                                      }
 311   4                                      else if(0x0a == (byBus0SendCount & 0x0f))
 312   4                                      {       //发送到结束位了
 313   5                                              bBus0SendBit = 1;
 314   5                                              Bus0SendPin = 0;        
 315   5                                      }
 316   4                                      else if(0x0b == (byBus0SendCount & 0x0f))
 317   4                                      {       //已经发送完结束位了
 318   5                                              bBus0OnSendBit = 0;                                             
 319   5                                              byBus0RecSendCount += 0x01;                                                                     
 320   5                                              if((byBus0RecSendCount & 0x0f) >= BUS0_FREQ_SIZE)
 321   5                                              {       //发送完一帧数据                                                                                                
 322   6                                                      byBus0RecSendCount &= 0xf0;                     //重新进入数据帧的发送阶段
 323   6                                                      byBus0State0 &= (~BUS0_SEND_CON);
 324   6                                                      byBus0SendStopCount = 240;
 325   6                                                      byBus0State1 |= BUS0_SEND_FINISH;                                                               
 326   6                                                      byBus0DisableCount = 10; 
 327   6                                              }
 328   5                                              else
 329   5                                              {                                               
 330   6                                                      byBus0SendStopCount = 10;
 331   6                                                      bBus0ReqSend = 1;
 332   6                                              }
 333   5                                              EnableBus0RecInt();                                             //再次使能接收中断
 334   5                                      }
 335   4                                      else
 336   4                                      {
 337   5                                              if(byBus0SendBuf & 0x01)
 338   5                                              {       //发送高电平
 339   6                                                      bBus0SendBit = 1;
 340   6                                                      Bus0SendPin = 0;                                        
 341   6                                              }
 342   5                                              else
 343   5                                              {       //发送低电平
 344   6                                                      bBus0SendBit = 0;
 345   6                                                      Bus0SendPin = 1;
 346   6                                              }
 347   5                                              byBus0SendBuf >>= 1;                                    //发送数据位移位操作
 348   5                                      }
 349   4                              }
 350   3                      }
 351   2                      else
 352   2                      {       //不相同,发送失败                                                               
 353   3                              byBus0State0 &= ~BUS0_SEND_CON;
 354   3                              byBus0RecSendCount &= 0xf0;
 355   3                              bBus0SendError = 1;                                     
 356   3                              Bus0SendPin = 0; 
 357   3                              byBus0SendStopCount = 240;
 358   3                      }
 359   2              }       
 360   1      
 361   1              /*******************************总线0控制处理***********************************/
 362   1              if(0 == (byBus0State0 & BUS0_ON_REC))
 363   1              {       
 364   2                      if(byBus0SendStopCount != 0)
 365   2                      {
C51 COMPILER V8.08   SINGLEBUS                                                             09/25/2012 08:54:09 PAGE 7   

 366   3                              if((--byBus0SendStopCount) == 0)
 367   3                              {                               
 368   4                                      bBus0Enable = 1;        
 369   4                              }
 370   3                      }               
 371   2                      if(bBus0Error)
 372   2                      {                                                               
 373   3                              bBus0Enable = 0;                        
 374   3                              if(bBus0RecBit)
 375   3                              {                               
 376   4                                      bBus0Error = 0;
 377   4                                      EnableBus0RecInt();
 378   4                                      byBus0SendStopCount = 240;
 379   4                              }
 380   3                      }
 381   2              }  
 382   1              
 383   1              /*******************************总线0超时处理***********************************/
 384   1              if(byBus0RecTimeOut != 0)
 385   1              {
 386   2                      if(--byBus0RecTimeOut == 0)                                                     
 387   2                      {       //接收超时到
 388   3                              byBus0RecSendCount &= 0x0f;
 389   3      
 390   3                      }
 391   2              }
 392   1              if(byBus0DisableCount != 0)
 393   1              {
 394   2                      if(--byBus0DisableCount == 0)                                           
 395   2                      {       //禁止超时到            
 396   3                              bBus0Disable = 0;
 397   3                      }
 398   2              }       
 399   1       
 400   1              /***********总线0自动发送管理**********/         
 401   1              if((byBus0State0 & BUS0_ON_WORK) == 0x00)                               
 402   1              {       //总线0没有工作                         
 403   2                      if(bBus0SendError)                                              
 404   2                      {       //产生了发送错误,自动重发                                                               
 405   3                              bBus0SendError = 0;                             
 406   3                              byBus0State0 |= BUS0_REQ_SEND;          
 407   3                      }
 408   2                      else                                                                    
 409   2                      {       //总线0无发送错误               
 410   3                              if(!(bBus0SendFinish|bBus0Disable))
 411   3                              {       //总线0没有禁止使用,且发送结束处理已经完成
 412   4                                      if(Bus0TxBuffLen() >= BUS0_FREQ_SIZE)
 413   4                                      {       //有一帧完整的数据在发送队列中                                                                                                                                          
 414   5                                              byBus0SendData[0] = byBus0TxQ[byBus0TxHead];
 415   5                                              IncBus0TxPtr(byBus0TxHead);
 416   5                                              byBus0SendData[1] = byBus0TxQ[byBus0TxHead];
 417   5                                              IncBus0TxPtr(byBus0TxHead);
 418   5                                              byBus0SendData[2] = byBus0TxQ[byBus0TxHead];
 419   5                                              IncBus0TxPtr(byBus0TxHead);
 420   5                                              byBus0SendData[3] = byBus0TxQ[byBus0TxHead];
 421   5                                              IncBus0TxPtr(byBus0TxHead);
 422   5                                              byBus0SendData[4] = byBus0TxQ[byBus0TxHead];
 423   5                                              IncBus0TxPtr(byBus0TxHead);
 424   5                                              byBus0SendData[5] = byBus0TxQ[byBus0TxHead];
 425   5                                              IncBus0TxPtr(byBus0TxHead);
 426   5                                              byBus0SendData[6] = byBus0TxQ[byBus0TxHead];
 427   5                                              IncBus0TxPtr(byBus0TxHead);     
C51 COMPILER V8.08   SINGLEBUS                                                             09/25/2012 08:54:09 PAGE 8   

 428   5                                              byBus0State0 |= BUS0_REQ_SEND;                                          
 429   5                                      }
 430   4                                      else
 431   4                                      {       //没有一帧完整的数据在发送队列中了
 432   5                                              byBus0TxHead = byBus0TxTail = 0;
 433   5                                      }                                                               
 434   4                              }
 435   3                      }
 436   2              } 
 437   1      
 438   1      } 
 439          /**********************************************************
 440          *函数名称                       :BcdToHex       
 441          *函数描述               :BCD转换成十六进制
 442          *输入参数               :byData:待转换的BCD码数据
 443          *返回值                         :
 444          *全局变量                       :
 445          *调用模块                       :
 446          ***********************************************************
 447          *创建人                 :陈卫国
 448          *创建日期                       :2008-9-22
 449          ***********************************************************
 450          *修改人                         :
 451          *修改日期               :
 452          *注释                   :
 453          **********************************************************/ 
 454          uint8 BcdToHex(uint8 byData)
 455          {
 456   1              uint8 xdata byRet;
 457   1      
 458   1              byRet = byData >> 4;
 459   1              byRet *= 10;
 460   1              byData &= 0x0f;
 461   1              byRet += byData;
 462   1              return(byRet);
 463   1      }
 464          
 465          /**********************************************************
 466          *函数名称                       :Bus0OutputData 
 467          *函数描述               :单总线0将待发送数据放入缓冲区
 468          *输入参数               :pbyData:待发送的数据指针
 469          *返回值                         :TRUE:发送成功,FALSE:队列满,发送失败    
 470          *全局变量                       :
 471          *调用模块                       :
 472          ***********************************************************
 473          *创建人                 :尹运同
 474          *创建日期                       :2008-9-22
 475          ***********************************************************
 476          *修改人                         :
 477          *修改日期               :
 478          *注释                   :
 479          **********************************************************/
 480          uint8 Bus0OutputData(uint8* pbyData)
 481          {
 482   1              uint8 byTemp = BUS0_FREQ_SIZE;
 483   1      
 484   1              EA=0;
 485   1              if(Bus0TxBuffLen() >= (BUS0_TX_Q_ZISE - 1))
 486   1              {       //没有空间存储了,失败   
 487   2                      EA=1;
 488   2                      return(FALSE);
 489   2              }       
C51 COMPILER V8.08   SINGLEBUS                                                             09/25/2012 08:54:09 PAGE 9   

 490   1              while(byTemp--)
 491   1              {       //数据入发送队列
 492   2                      byBus0TxQ[byBus0TxTail] = *pbyData++;
 493   2                      IncBus0TxPtr(byBus0TxTail);
 494   2              }
 495   1              EA=1;   
 496   1              return(TRUE);   
 497   1      }
 498          
 499          
 500          /**********************************************************
 501          *函数名称                       :AddrCompare    
 502          *函数描述               :比较地址(含广播地址)
 503          *输入参数               :pstBusFreq:待比较的数据帧指针
 504          *返回值                         :1:发送到本机的数据,0:不是发送到本机的数据      
 505          *全局变量                       :
 506          *调用模块                       :
 507          ***********************************************************
 508          *创建人                 :尹运同
 509          *创建日期                       :2008-9-22
 510          ***********************************************************
 511          *修改人                         :
 512          *修改日期               :
 513          *注释                   :
 514          **********************************************************/
 515          bit AddrCompare(pSTBusFreq pstBusFreq)
 516          {
 517   1              if((pstBusFreq->byRecSecAddr != 0xff) && (pstBusFreq->byRecSecAddr != stLocalControl.stEepromCfgData.bySe
             -lfSecAddr))
 518   1              {       
 519   2                      return(0);
 520   2              } 
 521   1              if((pstBusFreq->byRecRoomAddr != 0xff) && (pstBusFreq->byRecRoomAddr != stLocalControl.stEepromCfgData.by
             -SelfRoomAddr))
 522   1              {       
 523   2                      return(0);
 524   2              }
 525   1              if((pstBusFreq->byRecBedAddr != 0xff) && (pstBusFreq->byRecBedAddr != stLocalControl.stEepromCfgData.bySe
             -lfBedAddr))
 526   1              {       
 527   2                      return(0);
 528   2              }
 529   1              return(1); 
 530   1      
 531   1      /*      if((pstBusFreq->byRecSecAddr  == 0xff)&&
 532   1                 (pstBusFreq->byRecRoomAddr == 0xff)&&
 533   1                 (pstBusFreq->byRecBedAddr  == 0xff))
 534   1                      return(1);
 535   1              else if((pstBusFreq->byRecSecAddr == stLocalControl.stEepromCfgData.bySelfSecAddr)&&
 536   1                         (pstBusFreq->byRecRoomAddr== stLocalControl.stEepromCfgData.bySelfRoomAddr)&&
 537   1                         (pstBusFreq->byRecBedAddr == stLocalControl.stEepromCfgData.bySelfBedAddr))
 538   1                         return(1);
 539   1              else return(0);*/       
 540   1      }
 541          
 542          
 543          
 544          /**********************************************************
 545          *函数名称                       :SndAddrCompare 
 546          *函数描述               :比较源地址
 547          *输入参数               :pstBusFreq:待比较的数据帧指针
 548          *返回值                         :1:发送地址与本机相符,0:发送地址与本机不相符    
C51 COMPILER V8.08   SINGLEBUS                                                             09/25/2012 08:54:09 PAGE 10  

 549          *全局变量                       :
 550          *调用模块                       :
 551          ***********************************************************
 552          *创建人                 :尹运同
 553          *创建日期                       :2008-9-22
 554          ***********************************************************
 555          *修改人                         :
 556          *修改日期               :
 557          *注释                   :
 558          **********************************************************/
 559          bit SndAddrCompare(pSTBusFreq pstBusFreq)
 560          {
 561   1              if( (pstBusFreq->bySndSecAddr != stLocalControl.stEepromCfgData.bySelfSecAddr))
 562   1              {       
 563   2                      return(0);
 564   2              } 
 565   1              if((pstBusFreq->bySndRoomAddr != stLocalControl.stEepromCfgData.bySelfRoomAddr))
 566   1              {       
 567   2                      return(0);
 568   2              }
 569   1              if( (pstBusFreq->bySndBedAddr != stLocalControl.stEepromCfgData.bySelfBedAddr))
 570   1              {       
 571   2                      return(0);
 572   2              }
 573   1              return(1); 
 574   1      
 575   1      }
 576          
 577          /**********************************************************
 578          *函数名称                       :SndRecAddrCompare      
 579          *函数描述               :比较源地址或者目的地址
 580          *输入参数               :pstBusFreq:待比较的数据帧指针
 581          *返回值                         :1:发送地址或接收地址与参数指向的地址数据相符,0:发送地址或接收地址与参数指向的地址数据不相符    
 582          *全局变量                       :
 583          *调用模块                       :
 584          ***********************************************************
 585          *创建人                 :尹运同
 586          *创建日期                       :2008-9-22
 587          ***********************************************************
 588          *修改人                         :
 589          *修改日期               :
 590          *注释                   :
 591          **********************************************************/
 592          bit SndRecAddrCompare(uint8* pAddr)
 593          {
 594   1      
 595   1              if((    (stLocalControl.stBusDealFreq.bySndSecAddr      == *pAddr)&&
 596   1                              (stLocalControl.stBusDealFreq.bySndRoomAddr     == *(pAddr+1))&&
 597   1                              (stLocalControl.stBusDealFreq.bySndBedAddr      == *(pAddr+2)))||
 598   1                      (       (stLocalControl.stBusDealFreq.byRecSecAddr      == *pAddr)&&
 599   1                              (stLocalControl.stBusDealFreq.byRecRoomAddr == *(pAddr+1))&&
 600   1                              (stLocalControl.stBusDealFreq.byRecBedAddr      == *(pAddr+2))))                
 601   1                      return(1);
 602   1              else return(0);
 603   1      
 604   1      }
 605          
 606          
 607          
 608          /**********************************************************
 609          *函数名称                       :DirAddrCompare 
 610          *函数描述               :绝对比较地址
C51 COMPILER V8.08   SINGLEBUS                                                             09/25/2012 08:54:09 PAGE 11  

 611          *输入参数               :pstBusFreq:待比较的数据帧指针
 612          *返回值                         :1:发送到本机的数据,0:不是发送到本机的数据      
 613          *全局变量                       :
 614          *调用模块                       :
 615          ***********************************************************
 616          *创建人                 :尹运同
 617          *创建日期                       :2008-9-22
 618          ***********************************************************
 619          *修改人                         :
 620          *修改日期               :
 621          *注释                   :
 622          **********************************************************/
 623          bit DirAddrCompare(pSTBusFreq pstBusFreq)
 624          {
 625   1              if(pstBusFreq->byRecSecAddr != stLocalControl.stEepromCfgData.bySelfSecAddr)
 626   1              {       
 627   2                      return(0);
 628   2              } 
 629   1              if(pstBusFreq->byRecRoomAddr != stLocalControl.stEepromCfgData.bySelfRoomAddr)
 630   1              {       
 631   2                      return(0);
 632   2              }
 633   1              if(pstBusFreq->byRecBedAddr != stLocalControl.stEepromCfgData.bySelfBedAddr)
 634   1              {       
 635   2                      return(0);
 636   2              }
 637   1              return(1); 
 638   1      }
 639          
 640          
 641          /**********************************************************
 642          *函数名称                       :SaveIndicationData     
 643          *函数描述               :保存信息指示数据内容
 644          *输入参数               :pstBus0SendFreq:待保存的数据帧指针
 645          *返回值                         :
 646          *全局变量                       :stLocalControl
 647          *调用模块                       :
 648          ***********************************************************
 649          *创建人                 :尹运同
 650          *创建日期                       :2008-9-22
 651          ***********************************************************
 652          *修改人                         :
 653          *修改日期               :
 654          *注释                   :
 655          **********************************************************/
 656          void SaveIndicationData(pSTBusFreq pstBus0SendFreq)
 657          {       
 658   1              stLocalControl.stIndicationData.bySndSecAddr    = pstBus0SendFreq->bySndSecAddr;
 659   1              stLocalControl.stIndicationData.bySndRoomAddr   = pstBus0SendFreq->bySndRoomAddr;
 660   1              stLocalControl.stIndicationData.bySndBedAddr    = pstBus0SendFreq->bySndBedAddr;
 661   1              stLocalControl.stIndicationData.byCmd                   = pstBus0SendFreq->byRecSecAddr; 
 662   1      //      stLocalControl.stIndicationData.byCallCmd = pstBus0SendFreq->byCmd;
 663   1      
 664   1      }
 665          
 666          /**********************************************************
 667          *函数名称                       :VoiceChannelCtx        
 668          *函数描述               :语音通道切换处理函数
 669          *输入参数               :
 670          *返回值                         :
 671          *全局变量                       :
 672          *调用模块                       :
C51 COMPILER V8.08   SINGLEBUS                                                             09/25/2012 08:54:09 PAGE 12  

 673          ***********************************************************
 674          *创建人                 :尹运同
 675          *创建日期                       :2008-9-22
 676          ***********************************************************
 677          *修改人                         :
 678          *修改日期               :
 679          *注释                   :
 680          **********************************************************/ 
 681          void VoiceChannelCtx(void)      
 682          { 
 683   1      
 684   1              if(bChannel1Talk)
 685   1              {       //通道1主动通话
 686   2                      XTD = 0;
 687   2                      XTA = 1;        
 688   2              } 
 689   1              else if(bChannel0Talk)
 690   1              {       //通道0主动通话状态
 691   2                      XTA = 0;
 692   2                      XTD = 1;                
 693   2              }       
 694   1      
 695   1              else if(bWaitListen)
 696   1              {       //等待接听状态
 697   2                      
 698   2              }
 699   1              else if(bIndicatingOther)
 700   1              {       //正在指示其它分机
 701   2                      
 702   2              }
 703   1              else
 704   1              {       //没有任何语音状态存在          
 705   2                      XTA = XTD =0;   
 706   2              } 
 707   1      }
 708          /**********************************************************
 709          *函数名称                       :LedControl     
 710          *函数描述               :指示灯显示状态控制
 711          *输入参数               :
 712          *返回值                         :
 713          *全局变量                       :
 714          *调用模块                       :SetLedDealState,SetLedSetState
 715          ***********************************************************
 716          *创建人                 :尹运同
 717          *创建日期                       :2008-9-22
 718          ***********************************************************
 719          *修改人                         :
 720          *修改日期               :
 721          *注释                   :
 722          **********************************************************/ 
 723          void LedControl(void)
 724          {
 725   1      
 726   1      }
 727          /**********************************************************
 728          *函数名称                       :SysReset       
 729          *函数描述               :系统复位,该函数仅仅将通道0复位,将通道0
 730                                                   恢复到空闲状态
 731          *输入参数               :
 732          *返回值                         :
 733          *全局变量                       :
 734          *调用模块                       :
C51 COMPILER V8.08   SINGLEBUS                                                             09/25/2012 08:54:09 PAGE 13  

 735          ***********************************************************
 736          *创建人                 :尹运同
 737          *创建日期                       :2008-9-22
 738          ***********************************************************
 739          *修改人                         :
 740          *修改日期               :
 741          *注释                   :
 742          **********************************************************/
 743          void SysReset(void)
 744          {
 745   1              //清除对应标志  
 746   1              bBusy = bWaitAck = bWaitListen = 
 747   1          bChannel0Talk = 
 748   1              bSickRoomBroad = bOfficeBroad = bAllBroad = 
 749   1              bConfusionNoting = bServiceNoting = bHelpNoting = bEmergencyNoting=
 750   1              bIndicatingOther=0;                     
 751   1              VoiceChannelCtx();
 752   1              if(AddrCompare(&(stLocalControl.stBusDealFreq)))
 753   1              {
 754   2                      //向移动电话主动发送挂断命令;
 755   2                      GSMHandUpTreat();
 756   2              }
 757   1      }
 758          
 759          /**********************************************************
 760          *函数名称                       :SaveParameter  
 761          *函数描述               :存储配置参数,存储参数前先擦除整个扇区,
 762                                                   然后将所有参数重新写入扇区
 763          *输入参数               :
 764          *返回值                         :
 765          *全局变量                       :stLocalControl
 766          *调用模块                       :EnableIAP,IapErase,IapWriteByte,DisableIAP
 767          ***********************************************************
 768          *创建人                 :尹运同
 769          *创建日期                       :2008-9-22
 770          ***********************************************************
 771          *修改人                         :
 772          *修改日期               :
 773          *注释                   :
 774          **********************************************************/
 775          void SaveParameter(void)
 776          {  
 777   1              stLocalControl.uiShortType = IAP_ADDR;  
 778   1              stLocalControl.pbyData = &(stLocalControl.stEepromCfgData.byInitFlag);
 779   1              stLocalControl.byChar1 = sizeof(STEepromCfgData);
 780   1              EnableIAP(IAP_ERASE);
 781   1              IapErase(IAP_ADDR);     
 782   1              EnableIAP(IAP_WRITE); 
 783   1              while(stLocalControl.byChar1--)
 784   1              {
 785   2                      IapWriteByte(stLocalControl.uiShortType++, *stLocalControl.pbyData++);
 786   2              }
 787   1              DisableIAP();
 788   1      }
 789          
 790          
 791          //保存主动接听处理的电话号码
 792          void SaveTelNum(void)
 793          {  
 794   1              stLocalControl.uiShortType = TEL_NUM_ADDR;        //EEPROM中起始地址    
 795   1              stLocalControl.pbyData = TelNum;                                //被保存的数据
 796   1              stLocalControl.byChar1 = TEL_NUM_LEN;                                           //11个字节
C51 COMPILER V8.08   SINGLEBUS                                                             09/25/2012 08:54:09 PAGE 14  

 797   1              EnableIAP(IAP_ERASE);
 798   1              IapErase(IAP_ADDR);     
 799   1              EnableIAP(IAP_WRITE); 
 800   1              while(stLocalControl.byChar1--)
 801   1              {
 802   2                      IapWriteByte(stLocalControl.uiShortType++, *stLocalControl.pbyData++);
 803   2              }
 804   1              DisableIAP();
 805   1      }
 806          /**********************************************************
 807          *函数名称                       :ReadParameter  
 808          *函数描述               :将Flash中的配置数据读入到内存中
 809          *输入参数               :
 810          *返回值                         :
 811          *全局变量                       :stLocalControl
 812          *调用模块                       :EnableIAP,IapReadByte,DisableIAP
 813          ***********************************************************
 814          *创建人                 :尹运同
 815          *创建日期                       :2008-9-22
 816          ***********************************************************
 817          *修改人                         :
 818          *修改日期               :
 819          *注释                   :
 820          **********************************************************/
 821          void ReadParameter(void)
 822          {
 823   1      
 824   1              stLocalControl.uiShortType = IAP_ADDR;  
 825   1              stLocalControl.pbyData = &(stLocalControl.stEepromCfgData.byInitFlag);
 826   1              stLocalControl.byChar1 = sizeof(STEepromCfgData);
 827   1              
 828   1              EnableIAP(IAP_READ); 
 829   1              while(stLocalControl.byChar1--)
 830   1              {               
 831   2                      *stLocalControl.pbyData++ = IapReadByte(stLocalControl.uiShortType++);          
 832   2              }
 833   1              DisableIAP();
 834   1              
 835   1      }
 836          
 837          
 838          void ReadTelNum(void)
 839          {
 840   1      
 841   1              stLocalControl.uiShortType = TEL_NUM_ADDR;      //EEPROM中起始地址      
 842   1              stLocalControl.pbyData = TelNum;                                //被保存的数据
 843   1              stLocalControl.byChar1 = TEL_NUM_LEN;                                           //11个字节
 844   1      
 845   1              
 846   1              EnableIAP(IAP_READ); 
 847   1              while(stLocalControl.byChar1--)
 848   1              {               
 849   2                      *stLocalControl.pbyData++ = IapReadByte(stLocalControl.uiShortType++);          
 850   2              }
 851   1              DisableIAP();
 852   1      }
 853          
 854          /**********************************************************
 855          *函数名称                       :InitParameter  
 856          *函数描述               :初始化Flash中的配置数据
 857          *输入参数               :
 858          *返回值                         :
C51 COMPILER V8.08   SINGLEBUS                                                             09/25/2012 08:54:09 PAGE 15  

 859          *全局变量                       :stLocalControl
 860          *调用模块                       :EnableIAP,IapReadByte,DisableIAP
 861          ***********************************************************
 862          *创建人                 :尹运同
 863          *创建日期                       :2008-9-22
 864          ***********************************************************
 865          *修改人                         :
 866          *修改日期               :
 867          *注释                   :
 868          **********************************************************/
 869          void InitParameter(void)
 870          {
 871   1              EnableIAP(IAP_READ);
 872   1              if(IapReadByte(IAP_ADDR) == ParameterData[0])
 873   1              {//数据已经初始化完毕了,读取数据参数
 874   2                      ReadParameter();
 875   2      
 876   2              }
 877   1              else
 878   1              {       //没有初始化,初始化参数
 879   2                      stLocalControl.stEepromCfgData.byInitFlag = ParameterData[0];
 880   2                      stLocalControl.stEepromCfgData.bySelfSecAddr = ParameterData[1];
 881   2                      stLocalControl.stEepromCfgData.bySelfRoomAddr = ParameterData[2];
 882   2                      stLocalControl.stEepromCfgData.bySelfBedAddr = ParameterData[3];
 883   2                      
 884   2                      stLocalControl.stEepromCfgData.bySerialNum1= ParameterData[4];
 885   2                      stLocalControl.stEepromCfgData.bySerialNum2= ParameterData[5];
 886   2                      stLocalControl.stEepromCfgData.bySerialNum3= ParameterData[6];
 887   2                      stLocalControl.stEepromCfgData.byVersionHi = ParameterData[7];
 888   2                      stLocalControl.stEepromCfgData.byVersionLo= ParameterData[8];
 889   2                      
 890   2                      stLocalControl.stEepromCfgData.byTelNum[0]      = ParameterData[9];
 891   2                      stLocalControl.stEepromCfgData.byTelNum[1]      = ParameterData[10];    
 892   2                      stLocalControl.stEepromCfgData.byTelNum[2]      = ParameterData[11];
 893   2                      stLocalControl.stEepromCfgData.byTelNum[3]      = ParameterData[12];
 894   2                      stLocalControl.stEepromCfgData.byTelNum[4]      = ParameterData[13];
 895   2                      stLocalControl.stEepromCfgData.byTelNum[5]      = ParameterData[14];
 896   2                      stLocalControl.stEepromCfgData.byTelNum[6]      = ParameterData[15];
 897   2                      stLocalControl.stEepromCfgData.byTelNum[7]      = ParameterData[16];    
 898   2                      stLocalControl.stEepromCfgData.byTelNum[8]      = ParameterData[17];
 899   2                      stLocalControl.stEepromCfgData.byTelNum[9]      = ParameterData[18];
 900   2                      stLocalControl.stEepromCfgData.byTelNum[10]     = ParameterData[19];
 901   2                      stLocalControl.stEepromCfgData.byTelNum[11]     = ParameterData[20];
 902   2                      stLocalControl.stEepromCfgData.byTelNumValidLen = ParameterData[21];
 903   2                      
 904   2                      stLocalControl.stEepromCfgData.byTelFuncState   = ParameterData[22];
 905   2                      stLocalControl.stEepromCfgData.byRingTime               = ParameterData[23];
 906   2                      stLocalControl.stEepromCfgData.byTalkTime               = ParameterData[24];
 907   2                      stLocalControl.stEepromCfgData.byBroadTime              = ParameterData[25];
 908   2                      SaveParameter();
 909   2              }
 910   1      }
 911          
 912          
 913          void SaveCallAddr(pSTBusFreq pstBusFreq)
 914          {       
 915   1              stLocalControl.stCallAddr.bySndSecAddr = pstBusFreq->bySndSecAddr;
 916   1              stLocalControl.stCallAddr.bySndRoomAddr = pstBusFreq->bySndRoomAddr;
 917   1              stLocalControl.stCallAddr.bySndBedAddr = pstBusFreq->bySndBedAddr;
 918   1      
 919   1              stLocalControl.stCallAddr.byRecSecAddr = pstBusFreq->byRecSecAddr;
 920   1              stLocalControl.stCallAddr.byRecRoomAddr = pstBusFreq->byRecRoomAddr;
C51 COMPILER V8.08   SINGLEBUS                                                             09/25/2012 08:54:09 PAGE 16  

 921   1              stLocalControl.stCallAddr.byRecBedAddr = pstBusFreq->byRecBedAddr;      
 922   1      }
 923          
 924          
 925          /**********************************************************
 926          *函数名称                       :MakeCH0TimerOut        
 927          *函数描述               :设置通道0超时参数
 928          *输入参数               :byTimerOut:超时时间,byTimerOutCount:超时次数
 929          *返回值                         :
 930          *全局变量                       :stLocalControl
 931          *调用模块                       :
 932          ***********************************************************
 933          *创建人                 :尹运同
 934          *创建日期                       :2008-9-22
 935          ***********************************************************
 936          *修改人                         :
 937          *修改日期               :
 938          *注释                   :
 939          **********************************************************/  
 940          void MakeCH0TimerOut(uint8 byTimerOut, uint8 byTimerOutCount)
 941          {
 942   1              stLocalControl.stCH0TimerOut.byTimerOutSet = byTimerOut;
 943   1              stLocalControl.stCH0TimerOut.byTimerOut = byTimerOut;
 944   1              stLocalControl.stCH0TimerOut.byTimerOutCount = byTimerOutCount; 
 945   1      }
 946          /**********************************************************
 947          *函数名称                       :MakeCH1TimerOut        
 948          *函数描述               :设置通道1超时参数
 949          *输入参数               :byTimerOut:超时时间,byTimerOutCount:超时次数
 950          *返回值                         :
 951          *全局变量                       :stLocalControl
 952          *调用模块                       :
 953          ***********************************************************
 954          *创建人                 :尹运同
 955          *创建日期                       :2008-9-22
 956          ***********************************************************
 957          *修改人                         :
 958          *修改日期               :
 959          *注释                   :
 960          **********************************************************/   
 961          void MakeCH1TimerOut(uint8 byTimerOut, uint8 byTimerOutCount)
 962          {
 963   1              stLocalControl.stCH1TimerOut.byTimerOutSet = byTimerOut;
 964   1              stLocalControl.stCH1TimerOut.byTimerOut = byTimerOut;
 965   1              stLocalControl.stCH1TimerOut.byTimerOutCount = byTimerOutCount; 
 966   1      } 
 967          
 968          
 969          /**********************************************************
 970          *函数名称                       :Bus0RecDeal    
 971          *函数描述               :单总线0收到一帧数据处理函数,该函数首先
 972                                                   取出收到的数据,针对每条命令执行对应的控
 973                                                   制动作
 974          *输入参数               :
 975          *返回值                         :
 976          *全局变量                       :stLocalControl
 977          *调用模块                       :
 978          ***********************************************************
 979          *创建人                 :尹运同
 980          *创建日期                       :2008-9-22
 981          ***********************************************************
 982          *修改人                         :
C51 COMPILER V8.08   SINGLEBUS                                                             09/25/2012 08:54:09 PAGE 17  

 983          *修改日期               :
 984          *注释                   :
 985          **********************************************************/
 986          void Bus0RecDeal(void)
 987          {
 988   1              uint8 i;
 989   1              //取出收到的数据帧                      
 990   1              EA=0;
 991   1              memcpy(&(stLocalControl.stBusDealFreq), byBus0RecData, sizeof(STBusFreq));
 992   1              bBus0RecFinish = 0;
 993   1              EA=1;   
 994   1      
 995   1      //以下仅供测试用
 996   1      #if DEBUG==1
 997   1          Send_Data(&(stLocalControl.stBusDealFreq.bySndSecAddr),7);
 998   1      #endif
 999   1      /////////////////////////////////////////////////////////////////////////////////////
1000   1      
1001   1      
1002   1      
1003   1      
1004   1              switch(stLocalControl.stBusDealFreq.byCmd)
1005   1              {
1006   2                      case CMD_ENTER:                                                                         //确认登记命令                          
1007   2                              if(bLanding)
1008   2                              {       
1009   3                                      if(DirAddrCompare(&(stLocalControl.stBusDealFreq)))
1010   3                                      {       //发送到本机
1011   4                                              SYS_STATE_LED = LED_ON;
1012   4                                              bLanding = 0;
1013   4                                      }
1014   3                              }               
1015   2                              break;
1016   2                                      
1017   2                      case CMD_COMM_CALL:                                                                     //普通呼叫命令  -----点对点呼叫
1018   2                              if(!bBusy)
1019   2                              {       //通道0空闲                             
1020   3                                      bBusy = 1;
1021   3                                      //设置超时5s                            
1022   3                                      MakeCH0TimerOut(250, 0);
1023   3                                      
1024   3      /*                              if(bIndicatingOther) 
1025   3                                      {//如果正在指示其他分机,停止指示
1026   3                                              bIndicatingOther=0;
1027   3                                              //发送主动挂断电话
1028   3                                              GSMHandUpTreat();
1029   3                                              
1030   3                                              VoiceChannelCtx();
1031   3                                              LedControl();
1032   3                                      }
1033   3                                      //保存主动呼叫方地址
1034   3                                      SaveCallAddr(&(stLocalControl.stBusDealFreq));*/
1035   3                              }
1036   2                              break;
1037   2                              
1038   2                      case CMD_COMM_ANSWER:                                                           //普通应答命令                  
1039   2                              bBusy = 1; 
1040   2                              //设置振铃超时                  
1041   2                              MakeCH0TimerOut(50, stLocalControl.stEepromCfgData.byRingTime);
1042   2                              if(AddrCompare(&(stLocalControl.stBusDealFreq)))
1043   2                              {       //应答本机,清等待应答,进入等待接听状态
1044   3                                      bWaitAck = 0;                           
C51 COMPILER V8.08   SINGLEBUS                                                             09/25/2012 08:54:09 PAGE 18  

1045   3                                      bWaitListen = 1;                                                                                
1046   3                                      if((bChannel1Talk)||(!bDealKeyDown))
1047   3                                      {       //如果通道1忙,或者本机主动通话条件不存在了,缩短超时时间                         
1048   4                                              MakeCH0TimerOut(5, 0);
1049   4                                              break;
1050   4                                      }
1051   3                                      VoiceChannelCtx();
1052   3                                      LedControl();                           
1053   3                              }
1054   2                              break;
1055   2                      case CMD_CALL_LISTEN:                                                           //接听命令                              
1056   2                              bBusy = 1;
1057   2                              //设置通话超时
1058   2                              MakeCH0TimerOut(50, stLocalControl.stEepromCfgData.byTalkTime);
1059   2                              if(AddrCompare(&(stLocalControl.stBusDealFreq)))
1060   2                              {       //接听本机,清等待接听,进入通道0主动通话状态                     
1061   3                                      bWaitListen = 0;                        
1062   3                                      bChannel0Talk = 1;                                                              
1063   3                                      if((bChannel1Talk)||(!bDealKeyDown))
1064   3                                      {       //如果通道1忙,或者本机主动通话条件不存在了,缩短超时时间                                 
1065   4                                              MakeCH0TimerOut(5, 0);
1066   4                                              break;
1067   4                                      }
1068   3                                      VoiceChannelCtx();
1069   3                                      LedControl();
1070   3                              }
1071   2                              break;  
1072   2                              
1073   2                      case CMD_BROADCAST1:                                                            //收到病区广播命令
1074   2                      case CMD_BROADCAST2:                                                            //收到办公区广播命令
1075   2                      case CMD_BROADCAST3:                                                            //收到全区广播命令
1076   2                              if(!bBusy)
1077   2                              {       //通道0空闲                             
1078   3                                      bBusy = 1;
1079   3                                      //设置广播超时
1080   3                                      MakeCH0TimerOut(50, stLocalControl.stEepromCfgData.byBroadTime); 
1081   3                                      
1082   3      /*                              //暂存命令                              
1083   3                                      stLocalControl.stBusDealFreq.byRecSecAddr = stLocalControl.stBusDealFreq.byCmd;                         
1084   3      
1085   3                                      //保存主动呼叫方地址                            
1086   3                                      SaveCallAddr(&(stLocalControl.stBusDealFreq));
1087   3                                      if(bIndicatingOther)
1088   3                                      {       //如果正在指示其他分机,停止指示 
1089   3                                              bIndicatingOther = 0;   
1090   3                                              //发送主动挂断电话命令
1091   3                                              GSMHandUpTreat();
1092   3                                              
1093   3                                              LedControl();  
1094   3                                              VoiceChannelCtx();                                      
1095   3                                      }                               
1096   3                              
1097   3                                      if((bChannel1Talk))
1098   3                                      {       //通道1忙,不作处理      
1099   3                                              break;
1100   3                                      }                       
1101   3                                      switch(stLocalControl.stBusDealFreq.byRecSecAddr)
1102   3                                      {       //针对具体命令,看本机是否允许相应的广播
1103   3                                              case CMD_BROADCAST1:
1104   3                                                      bSickRoomBroad = 1; 
1105   3                                                      break;
1106   3                                              case CMD_BROADCAST2:
C51 COMPILER V8.08   SINGLEBUS                                                             09/25/2012 08:54:09 PAGE 19  

1107   3                                                      bOfficeBroad = 1; 
1108   3                                                      break;
1109   3                                              case CMD_BROADCAST3:
1110   3                                                      bAllBroad = 1;  
1111   3                                                      break;
1112   3                                      }
1113   3                                      VoiceChannelCtx();
1114   3                                      LedControl();*/
1115   3                              }
1116   2                              break;  
1117   2                      
1118   2                      case CMD_INFUSION_ENTER:                                                                //输液呼叫确认命令
1119   2                      case CMD_SERVICE_ENTER:                                                                 //服务呼叫确认命令
1120   2                      case CMD_HELP_ENTER:                                                                    //求援呼叫确认命令
1121   2                      case CMD_EMERGENCY_ENTER:                                                               //紧急呼叫确认命令
1122   2                              //
1123   2                              break; 
1124   2      
1125   2                              
1126   2                      case CMD_INFO_INDICATION:                                                               //收到呼叫指示命令  
1127   2                              if(!(bBusy ))
1128   2                              {       //本机通道0处于空闲状态,可以指示其他分机的呼叫命令了
1129   3                                      if((bChannel1Talk))
1130   3                                      {       //如果通道1处于通话状态,不作处理
1131   4                                              return;
1132   4                                      }       
1133   3                                      
1134   3                                      switch(stLocalControl.stBusDealFreq.byRecSecAddr & 0x1f)
1135   3                                      {
1136   4                                              case CMD_INFUSION_CALL:                                 //输液呼叫 
1137   4                                              case CMD_SERVICE_CALL:                                  //服务呼叫 
1138   4                                              case CMD_HELP_CALL:                                             //求援呼叫
1139   4                                                      //呼叫移动电话
1140   4                                                      GSMCallTreat();
1141   4                                                      
1142   4                                                      break;
1143   4                                              case CMD_EMERGENCY_CALL:                                //紧急呼叫 
1144   4                                              default:
1145   4                                                      return;
1146   4                                      }
1147   3      
1148   3                                      SaveIndicationData(&(stLocalControl.stBusDealFreq));                                                                                            
1149   3                                      bIndicatingOther = 1;                                   
1150   3                                      VoiceChannelCtx();
1151   3                                      LedControl();   
1152   3                                      UartSendByte(0xaa);
1153   3                              }  
1154   2                              break;
1155   2      
1156   2                              
1157   2                      case CMD_INFUSION_ANSWER:                                                       //处理输液呼叫命令
1158   2                      case CMD_SERVICE_ANSWER:                                                        //处理服务呼叫命令
1159   2                      case CMD_EMERGENCY_ANSWER:                                                      //处理紧急呼叫命令
1160   2                      case CMD_HELP_ANSWER:                                                           //处理求援呼叫命令
1161   2                              if(!bBusy)
1162   2                              {       //通道0不忙                             
1163   3                                      bBusy = 1;      
1164   3                                      //设置通道0超时                                 
1165   3                                      MakeCH0TimerOut(250, 0);
1166   3      
1167   3                                      //保存主动呼叫方地址    
1168   3      //                              SaveCallAddr(&(stLocalControl.stBusDealFreq));                                  
C51 COMPILER V8.08   SINGLEBUS                                                             09/25/2012 08:54:09 PAGE 20  

1169   3                                      if(AddrCompare(&(stLocalControl.stBusDealFreq)))
1170   3                                      {       //处理本机的呼叫命令,清相应的标志 
1171   4                                              //GSM模块不存在主动呼叫，然后被其它处理机处理
1172   4                              
1173   4                                      }
1174   3                                      if(bIndicatingOther)
1175   3                                      {       //正在指示其他分机,清除标志                                             
1176   4                                              bIndicatingOther = 0;   
1177   4                                              //发送主动挂断电话命令
1178   4                                              GSMHandUpTreat();
1179   4                                              
1180   4                                              VoiceChannelCtx();                                              
1181   4                                              LedControl();                   
1182   4                                      } 
1183   3                                      
1184   3                              }
1185   2                              break;
1186   2                      case CMD_STOP_INDICATION:                                                       //停止指示命令
1187   2                              if(bIndicatingOther)
1188   2                              {
1189   3                                      bIndicatingOther = 0;
1190   3                                      //发送主动挂断电话命令
1191   3                                      GSMHandUpTreat();
1192   3                                      
1193   3                                      VoiceChannelCtx();
1194   3                                      LedControl();                                                                   
1195   3                              }
1196   2                              break;
1197   2                      case CMD_INFUSION_CLEAR:                                                        //清除输液呼叫命令
1198   2                      case CMD_SERVICE_CLEAR:                                                         //清除服务呼叫命令
1199   2                      case CMD_HELP_CLEAR:                                                            //清除求援呼叫命令
1200   2                      case CMD_EMERGENCY_CLEAR:                                                       //清除紧急呼叫命令
1201   2                              if(AddrCompare(&(stLocalControl.stBusDealFreq)))
1202   2                              {       //清除床头分机的呼叫,清除相应的标志                     
1203   3                                      if(bIndicatingOther &&
1204   3                                              (stLocalControl.stBusDealFreq.byRecSecAddr == stLocalControl.stIndicationData.bySndSecAddr) &&
1205   3                                              (stLocalControl.stBusDealFreq.byRecRoomAddr == stLocalControl.stIndicationData.bySndRoomAddr) &&
1206   3                                              (stLocalControl.stBusDealFreq.byRecBedAddr == stLocalControl.stIndicationData.bySndBedAddr) &&
1207   3                                              ((stLocalControl.stBusDealFreq.byCmd-0x0a) == (stLocalControl.stIndicationData.byCmd & 0x1f)))
1208   3                                      {       //清除本机正在指示的呼叫信息                                    
1209   4                                              bIndicatingOther = 0;
1210   4                                              //向移动电话发送主动挂断命令
1211   4                                              GSMHandUpTreat();
1212   4                                              
1213   4                                              VoiceChannelCtx();
1214   4                                              LedControl();                                                                                                   
1215   4                                      }
1216   3                              }
1217   2                              break;                  
1218   2                      case CMD_SYSTERM_RESET:                                                         //系统复位命令
1219   2                              SysReset();
1220   2                              break; 
1221   2      
1222   2                      case CMD_SYSTERM_RESTART:
1223   2                              bBusy = bWaitAck = bWaitListen =  
1224   2                              bChannel0Talk = 
1225   2                              bChannel1Talk = 
1226   2                              bSickRoomBroad = bOfficeBroad = bAllBroad = 
1227   2                              bConfusionNoting = bServiceNoting = bHelpNoting = bEmergencyNoting=
1228   2                              bIndicatingOther=0;             
1229   2                              MakeCH0TimerOut(0, 0);
1230   2                              MakeCH1TimerOut(0, 0);
C51 COMPILER V8.08   SINGLEBUS                                                             09/25/2012 08:54:09 PAGE 21  

1231   2                              VoiceChannelCtx();
1232   2                              break;
1233   2              
1234   2                      case CMD_START_VOICE:                                                           //启动播音命令
1235   2                              break;
1236   2                      case CMD_MUSIC_PLAY:                                                            //背景音乐播放
1237   2                              break;  
1238   2                              
1239   2                      case CMD_STOP_VOICE:                                                            //停止所有音乐播放
1240   2                              break; 
1241   2                      case CMD_CHANNEL_CHANGE:                                                        //通道切换命令
1242   2                              //将通道0的状态切换到通道1上,同时清除通道0的通话状态
1243   2                              bBusy = bWaitAck = bWaitListen =  
1244   2                                      bSickRoomBroad = bOfficeBroad = bAllBroad =  0;                 
1245   2                              MakeCH0TimerOut(0, 0);                                                                  
1246   2                              if((bChannel0Talk))
1247   2                              {                               
1248   3                                      bChannel1Talk = bChannel0Talk;
1249   3                                      bChannel0Talk = 0;                              
1250   3                                      //设置通道1通话超时                                             
1251   3                                      MakeCH1TimerOut(50, stLocalControl.stEepromCfgData.byTalkTime);
1252   3                                      if(bChannel1Talk&&(!bDealKeyDown))
1253   3                                      {       //本机主动通话条件不存在了,缩短超时时间                                                                                 
1254   4                                              MakeCH1TimerOut(5, 0);
1255   4                                              break;                  
1256   4                                      }
1257   3                                      VoiceChannelCtx();
1258   3                                      LedControl(); 
1259   3                              }                                                       
1260   2                              break;
1261   2                              
1262   2                      case CMD_CHANNEL_CLOSE:                                                         //关闭通道切换命令
1263   2                              //清除通道1所有状态                     
1264   2                              bChannel1Talk  =0;
1265   2                              MakeCH1TimerOut(0, 0);  
1266   2                              VoiceChannelCtx();
1267   2                              LedControl();
1268   2                              if(SndRecAddrCompare(&(stLocalControl.stEepromCfgData.bySelfSecAddr))||
1269   2                                 SndRecAddrCompare(&(stLocalControl.stCallAddr.byRecSecAddr)))        //两路通话时，后一路通话分机主动挂通
1270   2                              {
1271   3                                      //向移动电话主动发送挂断命令;
1272   3                                      GSMHandUpTreat();
1273   3                              }
1274   2                              break;  
1275   2      
1276   2                      case CMD_POWER_ON:                                                                              //本机重新热启动        
1277   2                              if(AddrCompare(&(stLocalControl.stBusDealFreq)))
1278   2                              {//比较地址(含广播地址)
1279   3                                      if(DirAddrCompare(&(stLocalControl.stBusDealFreq)))
1280   3                                      {//绝对地址
1281   4                                              stLocalControl.stBusDealFreq.bySndSecAddr = stLocalControl.stEepromCfgData.bySelfSecAddr;
1282   4                                              stLocalControl.stBusDealFreq.bySndRoomAddr = stLocalControl.stEepromCfgData.bySelfRoomAddr;
1283   4                                              stLocalControl.stBusDealFreq.bySndBedAddr = stLocalControl.stEepromCfgData.bySelfBedAddr;
1284   4                                              stLocalControl.stBusDealFreq.byRecSecAddr = stLocalControl.stBusDealFreq.byCmd;//原命令
1285   4                                              stLocalControl.stBusDealFreq.byCmd = CMD_BUS_ANSWER;
1286   4                                              Bus0OutputData(&(stLocalControl.stBusDealFreq.bySndSecAddr));
1287   4                                      }
1288   3                                      else
1289   3                                      {//广播地址
1290   4                                              EA=0;
1291   4                                              //关闭所有打开的中断
1292   4                                              CCAPM0 = 0x00;
C51 COMPILER V8.08   SINGLEBUS                                                             09/25/2012 08:54:09 PAGE 22  

1293   4                                              ET0 = 0;
1294   4                                              TR0 = 0;
1295   4                                              EX0 = 0;
1296   4                                              ISP_CONTR = 0x20;                               
1297   4                                      }
1298   3                                      
1299   3                              }                               
1300   2                              break;
1301   2      
1302   2                      case CMD_DATE_SEND:
1303   2                              stLocalControl.stTime.bySec = BcdToHex(stLocalControl.stBusDealFreq.bySndSecAddr & 0x7f);
1304   2                              stLocalControl.stTime.byMin = BcdToHex(stLocalControl.stBusDealFreq.bySndRoomAddr & 0x7f);
1305   2                              stLocalControl.stTime.byHour = BcdToHex(stLocalControl.stBusDealFreq.bySndBedAddr & 0x3f);
1306   2                              stLocalControl.stTime.byDay = BcdToHex(stLocalControl.stBusDealFreq.byRecSecAddr & 0x3f);
1307   2                              stLocalControl.stTime.byMonth = BcdToHex(stLocalControl.stBusDealFreq.byRecRoomAddr & 0x1f);
1308   2                              stLocalControl.stTime.byYear = BcdToHex(stLocalControl.stBusDealFreq.byRecBedAddr);
1309   2                              break;                  
1310   2                              
1311   2      
1312   2              
1313   2                      case CMD_SD_TAL_VOL_CHECK:
1314   2                              stLocalControl.stBusDealFreq.byCmd = CMD_BUS_ANSWER; 
1315   2                              stLocalControl.stBusDealFreq.byRecSecAddr = CMD_SD_TAL_VOL_CHECK;
1316   2                              Bus0OutputData(&(stLocalControl.stBusDealFreq.bySndSecAddr));
1317   2                              XTD=1;
1318   2                              break;
1319   2                              
1320   2                      case CMD_SD_TAL_VOL_CHECK_END:
1321   2                              stLocalControl.stBusDealFreq.byCmd = CMD_BUS_ANSWER; 
1322   2                              stLocalControl.stBusDealFreq.byRecSecAddr = CMD_SD_TAL_VOL_CHECK_END;
1323   2                              Bus0OutputData(&(stLocalControl.stBusDealFreq.bySndSecAddr));   
1324   2                              XTD=0;
1325   2                              break;
1326   2      
1327   2                      case CMD_SA_TAL_VOL_CHECK:
1328   2                              stLocalControl.stBusDealFreq.byCmd = CMD_BUS_ANSWER; 
1329   2                              stLocalControl.stBusDealFreq.byRecSecAddr = CMD_SA_TAL_VOL_CHECK;
1330   2                              Bus0OutputData(&(stLocalControl.stBusDealFreq.bySndSecAddr));
1331   2                              XTA = 1;
1332   2                              break;
1333   2      
1334   2                      case CMD_SA_TAL_VOL_CHECK_END:
1335   2                              stLocalControl.stBusDealFreq.byCmd = CMD_BUS_ANSWER; 
1336   2                              stLocalControl.stBusDealFreq.byRecSecAddr = CMD_SA_TAL_VOL_CHECK_END;
1337   2                              Bus0OutputData(&(stLocalControl.stBusDealFreq.bySndSecAddr));
1338   2                              XTA = 0;
1339   2                              break;
1340   2                              
1341   2                      case CMD_GSM_FUNC_SEARCH:
1342   2                              stLocalControl.stBusDealFreq.bySndSecAddr       = stLocalControl.stEepromCfgData.bySelfSecAddr;
1343   2                              stLocalControl.stBusDealFreq.bySndRoomAddr      = stLocalControl.stEepromCfgData.bySelfRoomAddr;
1344   2                              stLocalControl.stBusDealFreq.bySndBedAddr       = stLocalControl.stEepromCfgData.bySelfBedAddr;
1345   2                              //命令还是原来命令
1346   2                              stLocalControl.stBusDealFreq.byRecSecAddr       = stLocalControl.stEepromCfgData.byTelFuncState;
1347   2                              Bus0OutputData(&(stLocalControl.stBusDealFreq.bySndSecAddr));
1348   2                              break;
1349   2                              
1350   2                      case CMD_GSM_FUNC_SET:
1351   2                              stLocalControl.stEepromCfgData.byTelFuncState = stLocalControl.stBusDealFreq.byRecSecAddr;
1352   2                              //SaveParameter();
1353   2      
1354   2                              stLocalControl.stBusDealFreq.bySndSecAddr       = stLocalControl.stEepromCfgData.bySelfSecAddr;
C51 COMPILER V8.08   SINGLEBUS                                                             09/25/2012 08:54:09 PAGE 23  

1355   2                              stLocalControl.stBusDealFreq.bySndRoomAddr      = stLocalControl.stEepromCfgData.bySelfRoomAddr;
1356   2                              stLocalControl.stBusDealFreq.bySndBedAddr       = stLocalControl.stEepromCfgData.bySelfBedAddr;
1357   2                              stLocalControl.stBusDealFreq.byCmd          = CMD_BUS_ANSWER;
1358   2                              stLocalControl.stBusDealFreq.byRecSecAddr       = CMD_GSM_FUNC_SET;
1359   2                              stLocalControl.stBusDealFreq.byRecRoomAddr      = stLocalControl.stEepromCfgData.byTelFuncState;
1360   2                              Bus0OutputData(&(stLocalControl.stBusDealFreq.bySndSecAddr));
1361   2                              break;
1362   2                              
1363   2                      case CMD_GSM_NUM_DEL:
1364   2      /*                      TelNum[0]       = stLocalControl.stBusDealFreq.bySndSecAddr>>4;
1365   2                              TelNum[1]       = stLocalControl.stBusDealFreq.bySndSecAddr&0x0f;
1366   2                              TelNum[2]       = stLocalControl.stBusDealFreq.bySndRoomAddr>>4;
1367   2                              TelNum[3]       = stLocalControl.stBusDealFreq.bySndRoomAddr&0x0f;      
1368   2                              TelNum[4]       = stLocalControl.stBusDealFreq.bySndBedAddr>>4;
1369   2                              TelNum[5]       = stLocalControl.stBusDealFreq.bySndBedAddr&0x0f;       
1370   2                              TelNum[6]       = stLocalControl.stBusDealFreq.byRecSecAddr>>4;
1371   2                              TelNum[7]       = stLocalControl.stBusDealFreq.byRecSecAddr&0x0f;
1372   2                              TelNum[8]       = stLocalControl.stBusDealFreq.byRecRoomAddr>>4;
1373   2                              TelNum[9]       = stLocalControl.stBusDealFreq.byRecRoomAddr&0x0f;      
1374   2                              TelNum[10]      = stLocalControl.stBusDealFreq.byRecBedAddr>>4;
1375   2                              TelNum[11]      = stLocalControl.stBusDealFreq.byRecBedAddr&0x0f;*/
1376   2      
1377   2                              stLocalControl.stBusDealFreq.bySndSecAddr       = stLocalControl.stEepromCfgData.bySelfSecAddr;
1378   2                              stLocalControl.stBusDealFreq.bySndRoomAddr      = stLocalControl.stEepromCfgData.bySelfRoomAddr;
1379   2                              stLocalControl.stBusDealFreq.bySndBedAddr       = stLocalControl.stEepromCfgData.bySelfBedAddr;
1380   2                              stLocalControl.stBusDealFreq.byCmd          = CMD_BUS_ANSWER;
1381   2                              stLocalControl.stBusDealFreq.byRecSecAddr       = CMD_GSM_NUM_DEL;
1382   2                              Bus0OutputData(&(stLocalControl.stBusDealFreq.bySndSecAddr));                   
1383   2      
1384   2      //                      memset(stLocalControl.stEepromCfgData.byTelNum,0x00,TEL_NUM_LEN+1);     //清零
1385   2      //                      stLocalControl.stEepromCfgData.byTelNumValidLen =0;
1386   2      //                      SaveParameter();
1387   2                              break;
1388   2                              
1389   2                      case CMD_GSM_NUM_SEARCH:        //查询手机号码          
1390   2                              for(i=0;i<TEL_NUM_LEN+1;i++)
1391   2                              {
1392   3                                      if(stLocalControl.stEepromCfgData.byTelNum[i]== 0x0f) break;
1393   3                              }
1394   2      
1395   2                              if(i<TEL_NUM_LEN+1)
1396   2                              {//找到电话号码
1397   3                                      switch(i)
1398   3                                      {
1399   4                                              case 0: //没有1个数字
1400   4                                                      return;
1401   4                                              case 1:
1402   4                                                      stLocalControl.stBusDealFreq.bySndSecAddr       =(stLocalControl.stEepromCfgData.byTelNum[0]<<4)+0x0f;
1403   4                                                      break;
1404   4                                              case 2:
1405   4                                                      stLocalControl.stBusDealFreq.bySndSecAddr       =(stLocalControl.stEepromCfgData.byTelNum[0]<<4)+stLocalCo
             -ntrol.stEepromCfgData.byTelNum[1];
1406   4                                                      stLocalControl.stBusDealFreq.bySndRoomAddr  =0xf0;
1407   4                                                      break;
1408   4                                              case 3:
1409   4                                                      stLocalControl.stBusDealFreq.bySndSecAddr       =(stLocalControl.stEepromCfgData.byTelNum[0]<<4)+stLocalCo
             -ntrol.stEepromCfgData.byTelNum[1];
1410   4                                                      stLocalControl.stBusDealFreq.bySndRoomAddr      =(stLocalControl.stEepromCfgData.byTelNum[2]<<4)+0x0f;                  
             -                        
1411   4                                                      break;
1412   4                                              case 4:
1413   4                                                      stLocalControl.stBusDealFreq.bySndSecAddr       =(stLocalControl.stEepromCfgData.byTelNum[0]<<4)+stLocalCo
C51 COMPILER V8.08   SINGLEBUS                                                             09/25/2012 08:54:09 PAGE 24  

             -ntrol.stEepromCfgData.byTelNum[1];
1414   4                                                      stLocalControl.stBusDealFreq.bySndRoomAddr      =(stLocalControl.stEepromCfgData.byTelNum[2]<<4)+stLocalC
             -ontrol.stEepromCfgData.byTelNum[3];
1415   4                                                      stLocalControl.stBusDealFreq.bySndBedAddr   =0xf0;
1416   4                                                      break;
1417   4                                              case 5:
1418   4                                                      stLocalControl.stBusDealFreq.bySndSecAddr       =(stLocalControl.stEepromCfgData.byTelNum[0]<<4)+stLocalCo
             -ntrol.stEepromCfgData.byTelNum[1];
1419   4                                                      stLocalControl.stBusDealFreq.bySndRoomAddr      =(stLocalControl.stEepromCfgData.byTelNum[2]<<4)+stLocalC
             -ontrol.stEepromCfgData.byTelNum[3];                                           
1420   4                                                      stLocalControl.stBusDealFreq.bySndBedAddr       =(stLocalControl.stEepromCfgData.byTelNum[4]<<4)+0x0f;
1421   4                                                      break;
1422   4                                              case 6:
1423   4                                                      stLocalControl.stBusDealFreq.bySndSecAddr       =(stLocalControl.stEepromCfgData.byTelNum[0]<<4)+stLocalCo
             -ntrol.stEepromCfgData.byTelNum[1];
1424   4                                                      stLocalControl.stBusDealFreq.bySndRoomAddr      =(stLocalControl.stEepromCfgData.byTelNum[2]<<4)+stLocalC
             -ontrol.stEepromCfgData.byTelNum[3];
1425   4                                                      stLocalControl.stBusDealFreq.bySndBedAddr       =(stLocalControl.stEepromCfgData.byTelNum[4]<<4)+stLocalCo
             -ntrol.stEepromCfgData.byTelNum[5];
1426   4                                                      stLocalControl.stBusDealFreq.byRecSecAddr   =0xf0;
1427   4                                                      break;
1428   4                                              case 7:
1429   4                                                      stLocalControl.stBusDealFreq.bySndSecAddr       =(stLocalControl.stEepromCfgData.byTelNum[0]<<4)+stLocalCo
             -ntrol.stEepromCfgData.byTelNum[1];
1430   4                                                      stLocalControl.stBusDealFreq.bySndRoomAddr      =(stLocalControl.stEepromCfgData.byTelNum[2]<<4)+stLocalC
             -ontrol.stEepromCfgData.byTelNum[3];
1431   4                                                      stLocalControl.stBusDealFreq.bySndBedAddr       =(stLocalControl.stEepromCfgData.byTelNum[4]<<4)+stLocalCo
             -ntrol.stEepromCfgData.byTelNum[5];
1432   4                                                      stLocalControl.stBusDealFreq.byRecSecAddr       =(stLocalControl.stEepromCfgData.byTelNum[6]<<4)+0x0f;                          
1433   4                                                      break;
1434   4                                              case 8:
1435   4                                                      stLocalControl.stBusDealFreq.bySndSecAddr       =(stLocalControl.stEepromCfgData.byTelNum[0]<<4)+stLocalCo
             -ntrol.stEepromCfgData.byTelNum[1];
1436   4                                                      stLocalControl.stBusDealFreq.bySndRoomAddr      =(stLocalControl.stEepromCfgData.byTelNum[2]<<4)+stLocalC
             -ontrol.stEepromCfgData.byTelNum[3];
1437   4                                                      stLocalControl.stBusDealFreq.bySndBedAddr       =(stLocalControl.stEepromCfgData.byTelNum[4]<<4)+stLocalCo
             -ntrol.stEepromCfgData.byTelNum[5];
1438   4                                                      stLocalControl.stBusDealFreq.byRecSecAddr       =(stLocalControl.stEepromCfgData.byTelNum[6]<<4)+stLocalCo
             -ntrol.stEepromCfgData.byTelNum[7];                                            
1439   4                                                      stLocalControl.stBusDealFreq.byRecRoomAddr      =0xf0;
1440   4                                                      break;
1441   4                                              case 9:
1442   4                                                      stLocalControl.stBusDealFreq.bySndSecAddr       =(stLocalControl.stEepromCfgData.byTelNum[0]<<4)+stLocalCo
             -ntrol.stEepromCfgData.byTelNum[1];
1443   4                                                      stLocalControl.stBusDealFreq.bySndRoomAddr      =(stLocalControl.stEepromCfgData.byTelNum[2]<<4)+stLocalC
             -ontrol.stEepromCfgData.byTelNum[3];
1444   4                                                      stLocalControl.stBusDealFreq.bySndBedAddr       =(stLocalControl.stEepromCfgData.byTelNum[4]<<4)+stLocalCo
             -ntrol.stEepromCfgData.byTelNum[5];
1445   4                                                      stLocalControl.stBusDealFreq.byRecSecAddr       =(stLocalControl.stEepromCfgData.byTelNum[6]<<4)+stLocalCo
             -ntrol.stEepromCfgData.byTelNum[7];                                            
1446   4                                                      stLocalControl.stBusDealFreq.byRecRoomAddr      =(stLocalControl.stEepromCfgData.byTelNum[8]<<4)+0x0f;                  
             -                        
1447   4                                                      break;
1448   4                                              case 10:
1449   4                                                      stLocalControl.stBusDealFreq.bySndSecAddr       =(stLocalControl.stEepromCfgData.byTelNum[0]<<4)+stLocalCo
             -ntrol.stEepromCfgData.byTelNum[1];
1450   4                                                      stLocalControl.stBusDealFreq.bySndRoomAddr      =(stLocalControl.stEepromCfgData.byTelNum[2]<<4)+stLocalC
             -ontrol.stEepromCfgData.byTelNum[3];
1451   4                                                      stLocalControl.stBusDealFreq.bySndBedAddr       =(stLocalControl.stEepromCfgData.byTelNum[4]<<4)+stLocalCo
             -ntrol.stEepromCfgData.byTelNum[5];
1452   4                                                      stLocalControl.stBusDealFreq.byRecSecAddr       =(stLocalControl.stEepromCfgData.byTelNum[6]<<4)+stLocalCo
             -ntrol.stEepromCfgData.byTelNum[7];
C51 COMPILER V8.08   SINGLEBUS                                                             09/25/2012 08:54:09 PAGE 25  

1453   4                                                      stLocalControl.stBusDealFreq.byRecRoomAddr      =(stLocalControl.stEepromCfgData.byTelNum[8]<<4)+stLocalC
             -ontrol.stEepromCfgData.byTelNum[9];                                           
1454   4                                                      stLocalControl.stBusDealFreq.byRecBedAddr       =0xf0;
1455   4                                                      break;
1456   4                                              case 11:
1457   4                                                      stLocalControl.stBusDealFreq.bySndSecAddr       =(stLocalControl.stEepromCfgData.byTelNum[0]<<4)+stLocalCo
             -ntrol.stEepromCfgData.byTelNum[1];
1458   4                                                      stLocalControl.stBusDealFreq.bySndRoomAddr      =(stLocalControl.stEepromCfgData.byTelNum[2]<<4)+stLocalC
             -ontrol.stEepromCfgData.byTelNum[3];
1459   4                                                      stLocalControl.stBusDealFreq.bySndBedAddr       =(stLocalControl.stEepromCfgData.byTelNum[4]<<4)+stLocalCo
             -ntrol.stEepromCfgData.byTelNum[5];
1460   4                                                      stLocalControl.stBusDealFreq.byRecSecAddr       =(stLocalControl.stEepromCfgData.byTelNum[6]<<4)+stLocalCo
             -ntrol.stEepromCfgData.byTelNum[7];
1461   4                                                      stLocalControl.stBusDealFreq.byRecRoomAddr      =(stLocalControl.stEepromCfgData.byTelNum[8]<<4)+stLocalC
             -ontrol.stEepromCfgData.byTelNum[9];                                           
1462   4                                                      stLocalControl.stBusDealFreq.byRecBedAddr       =(stLocalControl.stEepromCfgData.byTelNum[10]<<4)+0x0f;                 
             -                        
1463   4                                                      break;
1464   4                                      }
1465   3                                      Bus0OutputData(&(stLocalControl.stBusDealFreq.bySndSecAddr));
1466   3                              }
1467   2                              break;
1468   2                              
1469   2                      case CMD_GSM_NUM_SET:
1470   2                              TelNum[0]       = stLocalControl.stBusDealFreq.bySndSecAddr>>4;
1471   2                              TelNum[1]       = stLocalControl.stBusDealFreq.bySndSecAddr&0x0f;
1472   2                              TelNum[2]       = stLocalControl.stBusDealFreq.bySndRoomAddr>>4;
1473   2                              TelNum[3]       = stLocalControl.stBusDealFreq.bySndRoomAddr&0x0f;      
1474   2                              TelNum[4]       = stLocalControl.stBusDealFreq.bySndBedAddr>>4;
1475   2                              TelNum[5]       = stLocalControl.stBusDealFreq.bySndBedAddr&0x0f;       
1476   2                              TelNum[6]       = stLocalControl.stBusDealFreq.byRecSecAddr>>4;
1477   2                              TelNum[7]       = stLocalControl.stBusDealFreq.byRecSecAddr&0x0f;
1478   2                              TelNum[8]       = stLocalControl.stBusDealFreq.byRecRoomAddr>>4;
1479   2                              TelNum[9]       = stLocalControl.stBusDealFreq.byRecRoomAddr&0x0f;      
1480   2                              TelNum[10]      = stLocalControl.stBusDealFreq.byRecBedAddr>>4;
1481   2                              TelNum[11]      = stLocalControl.stBusDealFreq.byRecBedAddr&0x0f;
1482   2                              for(i=0;i<TEL_NUM_LEN+1;i++)
1483   2                              {
1484   3                                      if(TelNum[i]==0x0f) break;
1485   3                              }
1486   2                              if(i>=TEL_NUM_LEN+1) break;             //无效电话号码
1487   2                              stLocalControl.stEepromCfgData.byTelNumValidLen =       i;                      
1488   2                              memcpy(stLocalControl.stEepromCfgData.byTelNum,TelNum,stLocalControl.stEepromCfgData.byTelNumValidLen+1
             -);
1489   2      
1490   2                              stLocalControl.stBusDealFreq.bySndSecAddr       = stLocalControl.stEepromCfgData.bySelfSecAddr;
1491   2                              stLocalControl.stBusDealFreq.bySndRoomAddr      = stLocalControl.stEepromCfgData.bySelfRoomAddr;
1492   2                              stLocalControl.stBusDealFreq.bySndBedAddr       = stLocalControl.stEepromCfgData.bySelfBedAddr;
1493   2                              stLocalControl.stBusDealFreq.byCmd          = CMD_BUS_ANSWER;
1494   2                              stLocalControl.stBusDealFreq.byRecSecAddr       = CMD_GSM_NUM_SET;
1495   2                              Bus0OutputData(&(stLocalControl.stBusDealFreq.bySndSecAddr));
1496   2      
1497   2                              
1498   2      //                      SaveParameter();
1499   2                              break;
1500   2                              
1501   2                      default:
1502   2                              break;
1503   2      
1504   2              }       
1505   1      }
1506          
C51 COMPILER V8.08   SINGLEBUS                                                             09/25/2012 08:54:09 PAGE 26  

1507          /**********************************************************
1508          *函数名称                       :Bus0SendDeal   
1509          *函数描述               :单总线0发送完一帧数据处理函数,该函数首先
1510                                                   取出收到的数据,针对每条命令执行对应的控
1511                                                   制动作
1512          *输入参数               :
1513          *返回值                         :
1514          *全局变量                       :stLocalControl
1515          *调用模块                       :
1516          ***********************************************************
1517          *创建人                 :尹运同
1518          *创建日期                       :2008-9-22
1519          ***********************************************************
1520          *修改人                         :
1521          *修改日期               :
1522          *注释                   :
1523          **********************************************************/
1524          void Bus0SendDeal(void)
1525          { 
1526   1              //取出发送完成的数据帧
1527   1              EA=0;
1528   1              memcpy(&(stLocalControl.stBusDealFreq), byBus0SendData, sizeof(STBusFreq));             
1529   1              bBus0SendFinish = 0;
1530   1              EA=1;   
1531   1      
1532   1              //以下仅供测试用
1533   1              //调试用
1534   1      #if DEBUG==1    
1535   1          Send_Data(&(stLocalControl.stBusDealFreq.bySndSecAddr),7);
1536   1      #endif
1537   1              /////////////////////////////////////////////////////////////////////////////////////
1538   1      
1539   1              switch(stLocalControl.stBusDealFreq.byCmd)
1540   1              {
1541   2                      case CMD_LANDING:                                                                       //登记命令
1542   2                              if(bLanding)
1543   2                              {       //本机确实处在登记状态,设置等待确认超时
1544   3                                      MakeCH0TimerOut(150, 0);                                
1545   3                              }                       
1546   2                              break;
1547   2      
1548   2                      case CMD_COMM_CALL:                                                                     //普通呼叫命令                                                  
1549   2                      case CMD_INFUSION_ANSWER:                                                       //处理输液呼叫
1550   2                      case CMD_SERVICE_ANSWER:                                                        //处理服务呼叫
1551   2                      case CMD_EMERGENCY_ANSWER:                                                      //处理紧急呼叫
1552   2                      case CMD_HELP_ANSWER:                                                           //处理求援呼叫
1553   2                              //停止正在指示的呼叫
1554   2                              if(bIndicatingOther)
1555   2                              {       
1556   3                                      bIndicatingOther = 0;                           
1557   3                                      VoiceChannelCtx();
1558   3                                      LedControl();                                                   
1559   3                              }
1560   2                              if(!bBusy)
1561   2                              {       //不忙,进入等待应答状态,保存主叫方地址,设置超时
1562   3                                      bBusy = bWaitAck = 1;
1563   3                                      SaveCallAddr(&(stLocalControl.stBusDealFreq));                          
1564   3                                      MakeCH0TimerOut(250, 0);                                                
1565   3                              }                               
1566   2                              break;
1567   2                              
1568   2                      case CMD_COMM_ANSWER:                                                           //普通应答命令
C51 COMPILER V8.08   SINGLEBUS                                                             09/25/2012 08:54:09 PAGE 27  

1569   2                              if(bBusy)
1570   2                              {//GSM模块不存在被别的设备主动点对点呼叫，然后GSM模块发送应答
1571   3      
1572   3                                                      
1573   3                              }
1574   2                              break;
1575   2                      case CMD_CALL_LISTEN:                                                           //接听命令
1576   2                              if(bBusy)
1577   2                              {//GSM模块不存在主动发送此命令
1578   3      
1579   3                              }
1580   2                              break;
1581   2                              
1582   2                      case CMD_BROADCAST1:
1583   2                      case CMD_BROADCAST2:
1584   2                      case CMD_BROADCAST3:                                                                            //广播命令
1585   2                              //GSM模块不存在主动广播命令
1586   2                              break;
1587   2                              
1588   2                      case CMD_INFUSION_CLEAR:                                                        //清除输液呼叫
1589   2                      case CMD_SERVICE_CLEAR:                                                         //清除服务呼叫
1590   2                      case CMD_HELP_CLEAR:                                                            //清除求援呼叫
1591   2                      case CMD_EMERGENCY_CLEAR:                                                       //清除紧急呼叫
1592   2                               if(bIndicatingOther &&
1593   2                                      (stLocalControl.stBusDealFreq.byRecSecAddr      == stLocalControl.stIndicationData.bySndSecAddr) &&
1594   2                                      (stLocalControl.stBusDealFreq.byRecRoomAddr == stLocalControl.stIndicationData.bySndRoomAddr) &&
1595   2                                      (stLocalControl.stBusDealFreq.byRecBedAddr      == stLocalControl.stIndicationData.bySndBedAddr) &&
1596   2                                      ((stLocalControl.stBusDealFreq.byCmd - 0x0a) == (stLocalControl.stIndicationData.byCmd & 0x1f)))//对应
             -的呼叫命令
1597   2                              {       //清除本机正在指示的呼叫                                        
1598   3                                      bIndicatingOther = 0;
1599   3                                      VoiceChannelCtx();
1600   3                                      LedControl();                                                                                                   
1601   3                              }                       
1602   2                              break;  
1603   2      
1604   2                      case CMD_CHANNEL_CLOSE:                                                         //关闭语音通道命令
1605   2                              bChannel1Talk  = 0;                     
1606   2                              MakeCH1TimerOut(0, 0);
1607   2                              VoiceChannelCtx();
1608   2                              LedControl();
1609   2                              break;
1610   2                              
1611   2                      case CMD_GET_BUS:                                                                       //占用总线
1612   2                              Bus0SendPin = 1;                                                                //制造总线故障
1613   2                              SaveParameter();
1614   2                              Bus0SendPin = 0;                                                                //释放总线                              
1615   2                              break;
1616   2                              
1617   2                      case CMD_SYSTERM_RESET:                                                         //系统复位命令
1618   2                              SysReset();
1619   2                              break; 
1620   2                              
1621   2                      case CMD_BUS_ANSWER:
1622   2                              switch(stLocalControl.stBusDealFreq.byRecSecAddr)
1623   2                              {
1624   3                                      case CMD_POWER_ON:
1625   3                                              EA=0;
1626   3                                              //关闭所有打开的中断
1627   3                                              CCAPM0 = 0x00;
1628   3                                              ET0 = 0;
1629   3                                              TR0 = 0;
C51 COMPILER V8.08   SINGLEBUS                                                             09/25/2012 08:54:09 PAGE 28  

1630   3                                              EX0 = 0;
1631   3                                              ISP_CONTR = 0x20;       
1632   3      
1633   3                                              
1634   3                                      case CMD_SD_TAL_VOL_CHECK_END:
1635   3                                              XTD=0;
1636   3                                              break;
1637   3      
1638   3                                      case CMD_GSM_FUNC_SET:
1639   3                                              SaveParameter();
1640   3                                              break;
1641   3                                              
1642   3                                      case CMD_GSM_NUM_DEL:
1643   3                                              memset(stLocalControl.stEepromCfgData.byTelNum,0x00,TEL_NUM_LEN+1); //清零
1644   3                                              stLocalControl.stEepromCfgData.byTelNumValidLen =0;
1645   3                                              SaveParameter();
1646   3                                              break;
1647   3      
1648   3                                      case CMD_GSM_NUM_SET:
1649   3                                              SaveParameter();
1650   3                                              break;
1651   3      
1652   3                              }
1653   2                              break;
1654   2                              
1655   2                      default:
1656   2                              break;                  
1657   2      
1658   2              }       
1659   1      }
1660          
1661          /**********************************************************
1662          *函数名称                       :TimerOutDeal   
1663          *函数描述               :超时处理函数
1664          *输入参数               :
1665          *返回值                         :
1666          *全局变量                       :stLocalControl
1667          *调用模块                       :Bus0OutputData,Bus1OutputData,VoiceChannelCtx,
1668                                                   LedControl,SetHandLedState
1669          ***********************************************************
1670          *创建人                 :尹运同
1671          *创建日期                       :2008-9-22
1672          ***********************************************************
1673          *修改人                         :
1674          *修改日期               :
1675          *注释                   :
1676          **********************************************************/
1677          void TimerOutDeal(void)
1678          { 
1679   1              if(stLocalControl.stCH0TimerOut.byTimerOut != 0)
1680   1              {       //有超时设置存在
1681   2                      stLocalControl.stCH0TimerOut.byTimerOut--;
1682   2                      if(stLocalControl.stCH0TimerOut.byTimerOut == 0)
1683   2                      {       //超时一次到了 
1684   3                              if(stLocalControl.stCH0TimerOut.byTimerOutCount == 0x00)
1685   3                              {       //所有超时完成
1686   4                                      goto TIMER0OUTDEAL;
1687   4                              }
1688   3                              else
1689   3                              {       //超时次数没有完
1690   4                                      stLocalControl.stCH0TimerOut.byTimerOutCount--;
1691   4                                      if(stLocalControl.stCH0TimerOut.byTimerOutCount == 0x00)
C51 COMPILER V8.08   SINGLEBUS                                                             09/25/2012 08:54:09 PAGE 29  

1692   4                                      {       //所有超时完成
1693   5      TIMER0OUTDEAL:
1694   5                                              if(bLanding)
1695   5                                              {       //上电状态
1696   6                                                      stLocalControl.stBusDealFreq.bySndSecAddr = stLocalControl.stEepromCfgData.bySelfSecAddr;
1697   6                                                      stLocalControl.stBusDealFreq.bySndRoomAddr = stLocalControl.stEepromCfgData.bySelfRoomAddr;
1698   6                                                      stLocalControl.stBusDealFreq.bySndBedAddr = stLocalControl.stEepromCfgData.bySelfBedAddr;
1699   6                                                      stLocalControl.stBusDealFreq.byCmd = CMD_LANDING;
1700   6                                                      stLocalControl.stBusDealFreq.byRecSecAddr = stLocalControl.stEepromCfgData.bySerialNum1;
1701   6                                                      stLocalControl.stBusDealFreq.byRecRoomAddr = stLocalControl.stEepromCfgData.bySerialNum2;
1702   6                                                      stLocalControl.stBusDealFreq.byRecBedAddr = stLocalControl.stEepromCfgData.bySerialNum3;
1703   6                                                      Bus0OutputData(&(stLocalControl.stBusDealFreq.bySndSecAddr));                                           
1704   6                                              }
1705   5                                              else 
1706   5                                              if((bWaitAck|bWaitListen|bChannel0Talk))
1707   5                                              {       //等待应答，等待接听，主动通话，主动广播状态                            
1708   6                                                      stLocalControl.stBusDealFreq.bySndSecAddr = stLocalControl.stEepromCfgData.bySelfSecAddr;
1709   6                                                      stLocalControl.stBusDealFreq.bySndRoomAddr = stLocalControl.stEepromCfgData.bySelfRoomAddr;
1710   6                                                      stLocalControl.stBusDealFreq.bySndBedAddr = stLocalControl.stEepromCfgData.bySelfBedAddr;
1711   6                                                      stLocalControl.stBusDealFreq.byCmd = CMD_SYSTERM_RESET;
1712   6                                                      
1713   6                                                      stLocalControl.stBusDealFreq.byRecSecAddr = stLocalControl.stCallAddr.byRecSecAddr;
1714   6                                                      stLocalControl.stBusDealFreq.byRecRoomAddr = stLocalControl.stCallAddr.byRecRoomAddr;
1715   6                                                      stLocalControl.stBusDealFreq.byRecBedAddr = stLocalControl.stCallAddr.byRecBedAddr;                                                                                     
1716   6                                                      Bus0OutputData(&(stLocalControl.stBusDealFreq.bySndSecAddr));
1717   6      
1718   6                                                      GSMHandUpTreat();
1719   6                                              }                                                               
1720   5                                              else
1721   5                                              {
1722   6                                                      bBusy = bSickRoomBroad = bOfficeBroad = bAllBroad = 0;
1723   6                                                      VoiceChannelCtx();
1724   6                                                      LedControl();                                           
1725   6                                              }
1726   5                                      }
1727   4                                      else
1728   4                                      {       //超时次数没有完成，重新加载单位超时时间                                
1729   5                                              stLocalControl.stCH0TimerOut.byTimerOut = stLocalControl.stCH0TimerOut.byTimerOutSet;
1730   5                                      }
1731   4                              }                       
1732   3                      }
1733   2              }
1734   1              //通道1超时处理
1735   1              if(stLocalControl.stCH1TimerOut.byTimerOut != 0)
1736   1              {       //有超时设置存在
1737   2                      stLocalControl.stCH1TimerOut.byTimerOut--;
1738   2                      if(stLocalControl.stCH1TimerOut.byTimerOut == 0)
1739   2                      {       //超时一次到了 
1740   3                              if(stLocalControl.stCH1TimerOut.byTimerOutCount == 0x00)
1741   3                              {       //所有超时完成
1742   4                                      goto TIMER1OUTDEAL;
1743   4                              }
1744   3                              else
1745   3                              {       //超时次数没有完
1746   4                                      stLocalControl.stCH1TimerOut.byTimerOutCount--;
1747   4                                      if(stLocalControl.stCH1TimerOut.byTimerOutCount == 0x00)
1748   4                                      {       //所有超时完成
1749   5      TIMER1OUTDEAL:
1750   5                                              if(bChannel1Talk)
1751   5                                              {       //主动通话状态，发送切换命令                                            
1752   6                                                      stLocalControl.stBusDealFreq.bySndSecAddr = stLocalControl.stEepromCfgData.bySelfSecAddr;
1753   6                                                      stLocalControl.stBusDealFreq.bySndRoomAddr = stLocalControl.stEepromCfgData.bySelfRoomAddr;
C51 COMPILER V8.08   SINGLEBUS                                                             09/25/2012 08:54:09 PAGE 30  

1754   6                                                      stLocalControl.stBusDealFreq.bySndBedAddr = stLocalControl.stEepromCfgData.bySelfBedAddr;                                               
1755   6                                                      stLocalControl.stBusDealFreq.byCmd = CMD_CHANNEL_CLOSE; 
1756   6      /*                                              
1757   6                                                      stLocalControl.stBusDealFreq.byRecSecAddr = 0xff;
1758   6                                                      stLocalControl.stBusDealFreq.byRecRoomAddr = 0xff;
1759   6                                                      stLocalControl.stBusDealFreq.byRecBedAddr = 0xff;       
1760   6      */
1761   6                                                      stLocalControl.stBusDealFreq.byRecSecAddr = stLocalControl.stCallAddr.byRecSecAddr;
1762   6                                                      stLocalControl.stBusDealFreq.byRecRoomAddr = stLocalControl.stCallAddr.byRecRoomAddr;;
1763   6                                                      stLocalControl.stBusDealFreq.byRecBedAddr = stLocalControl.stCallAddr.byRecBedAddr;                                     
1764   6                                                      Bus0OutputData(&(stLocalControl.stBusDealFreq.bySndSecAddr));
1765   6                                                      
1766   6                                                      GSMHandUpTreat();
1767   6                                              }
1768   5      
1769   5                                      }
1770   4                                      else
1771   4                                      {       //超时次数没有完成，重新加载单位超时时间                                
1772   5                                              stLocalControl.stCH1TimerOut.byTimerOut = stLocalControl.stCH1TimerOut.byTimerOutSet;
1773   5                                      }
1774   4                              }                       
1775   3                      }
1776   2              }       
1777   1      
1778   1              //灯状态控制
1779   1              if(!bLanding)
1780   1              {
1781   2                      if(--stLocalControl.byLedFlashTime == 0x00)
1782   2                      {
1783   3                              stLocalControl.byLedFlashTime = stLocalControl.byLedTimeSet;
1784   3                              SYS_STATE_LED = !SYS_STATE_LED;
1785   3                      }
1786   2              }
1787   1      }
1788                    


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   4456    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =     85       1
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     15       5
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
